{"version":3,"sources":["components/SoundMachineInstrument.jsx","components/AccentTypes.jsx","components/InstrumentLib.jsx","components/SimpleVis.jsx","components/SoundMachine.jsx","components/PlayModes.jsx","components/SimpleProgress.jsx","components/Planner.jsx","components/AdvancedSlider.jsx","components/AdvancedRange.jsx","components/BarManager.jsx","components/PresetsLib.jsx","components/PresetsManager.jsx","components/SimplePanel.jsx","components/ModePanel.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SoundMachineInstrument","props","_this","Object","classCallCheck","this","console","log","key","o","C3","samples","C#3","D3","possibleConstructorReturn","getPrototypeOf","call","baseUrl","Sampler","accentTypes","ACCENT_1","ACCENT_2","ACCENT_3","instruments","TABLA","ELECTRO_KIT","InstrumentLib","defaultInstrument","state","lib","currentInstrument","undefined","tabla","label","toMaster","electro","setInstrument","Error","Component","SimpleVis","radius","height","myRef","React","createRef","idx","lastEl","classList","remove","beats","el","refs","add","a","b","width","current","offsetWidth","radDelta","Math","PI","i","x","sin","y","cos","style","position","left","top","cell","push","react_default","createElement","ref","Container","className","renderCells","defaultProps","SoundMachine","accentNotes","instrumentLib","currentBeat","beatsPerStep","score","isPlaying","accents","part","repeat","time","note","getInstrument","triggerAttackRelease","updateVis","Tone","Draw","schedule","setBpm","bpm","Transport","value","setBeatsPerStep","newBps","length","pop","timeSignature","setState","progress","vis","setActive","playNote","restart","getBpm","instrument","_this2","Synth","Buffer","on","onBufferError","context","latencyHint","scheduleRepeat","loopEndEvent","Event","onLoopEndFunc","onLoopEnd","loop","instrumentKey","bars","cancel","barsAmount","loopEnd","start","accentTypesArr","at","components_SimpleVis","stop","playModes","BY_BAR","BY_TIME","SimpleProgress","display","Planner","stepProgress","timer","startTime","stepsCounter","stepProgressUpdateInterval","planChanged","onChange","barRender","cls","currentStep","step","onClick","onStepClick","segmentDuration","formatTime","toFixed","end","s","min","bpmRange","max","segments","playMode","segment","interval","bpmStep","uiStateObject","plan","makePlan","totalPlanTime","bar","timeEnd","startTimeFormatted","endTimeFormatted","prevState","lockBpm","clearInterval","stepProgressUpdateTimer","resetStep","onAdvance","_this3","onInterval","bind","setInterval","Date","updateStepProgress","event","getCurrentBar","now","getTime","_this4","_this5","components_SimpleProgress","opacity","map","t","timeInSeconds","setSeconds","getMinutes","padTime","getSeconds","AdvancedSlider","get","prototype","Badge","onBadgeClick","Slider","AdvancedRange","bounds","Range","BarManager","Button","size","color","getBtnColor","handleCellClick","prepareBars","defaultValue","amount","oldVal","getValue","toConsumableArray","onAfterChange","accentsArray","selected","type","newType","forceUpdate","ButtonGroup","PresetsLib","title","PresetsManager","presets","preset","onSelect","Row","item","Col","onPresetClick","SimplePanel","children","ModePanel","bpmStepDropdownOpen","byTimeInterval","byBarInterval","newMode","e","target","name","Number","components_SimplePanel","onModeChange","active","Collapse","isOpen","Input","onInputChange","bsSize","ButtonDropdown","margin","toggle","onBpmStepChange","DropdownToggle","caret","DropdownMenu","DropdownItem","onBpmStepSelect","App","timerRef","currentBpm","instrumentDropdownOpen","cycleDropdownOpen","onBeatsPerStepChange","getUiState","sm","barManager","setBarsAmount","onPlanAdvanced","newStep","planner","newBpm","onPlanChanged","setLoopEnd","handleStartStop","setPlan","setProgressEvent","newInstrument","xs","components_AdvancedSlider","components_BarManager","onAccentsChange","components_AdvancedRange","pushable","onBpmRangeChange","onInstrumentChange","onInstrumentSelect","renderExamplesPane","renderVisPane","renderTempoPane","components_ModePanel","onModePanelChanged","renderPlaybackPane","renderCyclePane","_this6","components_PresetsManager","onPresetSelect","_this7","components_SoundMachine","setAccents","modePanel","setValue","_this8","components_Planner","renderPlanPane","_this9","renderLeftPane","renderMidPane","renderRightPane","block","onLockBpmBtn","onDebug","s1","s2","objectSpread","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAmBeA,cAdX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfM,QAAQC,IAAI,sCAAuCN,EAAMO,KACzD,IAAIC,EAAI,CACJC,GAAOT,EAAMU,QAAQ,GACrBC,MAAQX,EAAMU,QAAQ,GACtBE,GAAOZ,EAAMU,QAAQ,IALV,OAOfT,EAAAC,OAAAW,EAAA,EAAAX,CAAAE,KAAAF,OAAAY,EAAA,EAAAZ,CAAAH,GAAAgB,KAAAX,KAAMI,EAAE,CACJQ,QAAShB,EAAMgB,SAAW,WAAahB,EAAMO,IAAM,QAElDA,IAAMP,EAAMO,IAVFN,6BAFcgB,WCHxBC,EAAc,CAC1BC,SAAU,EACVC,SAAU,EACVC,SAAU,GCAEC,EAAc,CAC1BC,MAAO,QACPC,YAAa,cAqDCC,cA3CX,SAAAA,EAAYC,GAAmB,IAAAzB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IAC3BxB,EAAAC,OAAAW,EAAA,EAAAX,CAAAE,KAAAF,OAAAY,EAAA,EAAAZ,CAAAuB,GAAAV,KAAAX,QANPuB,MAAQ,GAK0B1B,EAJ/B2B,IAAM,GAIyB3B,EAH/B4B,uBAAoBC,EAOtB,IAAIC,EAAQ,IAAIhC,EAAuB,CAC7BQ,IAAKe,EAAYC,MACjBS,MAAO,QAChBtB,QAAS,CAAC,gBAAiB,iBAAkB,aACrCuB,WAEHhC,EAAK2B,IAAKG,EAAMxB,KAAQwB,EAExB,IAAIG,EAAU,IAAInC,EAAuB,CACrCQ,IAAKe,EAAYE,YACjBQ,MAAO,iBAChBtB,QAAS,CAAC,WAAY,YAAa,eAC3BuB,WAhBwB,OAkB3BhC,EAAK2B,IAAKM,EAAQ3B,KAAQ2B,EAE1BjC,EAAKkC,cAAcT,GAEnBrB,QAAQC,IAAI,mCAtBeL,6EAyBjBM,GACV,QAAsBuB,IAAlB1B,KAAKwB,IAAIrB,GACT,MAAM,IAAI6B,MAAM,wDAA0D7B,GAE9EH,KAAKyB,kBAAoBtB,0CAIzB,QAAyCuB,IAArC1B,KAAKwB,IAAIxB,KAAKyB,mBACd,MAAM,IAAIO,MAAM,iDAAmDhC,KAAKyB,mBAE5E,OAAOzB,KAAKwB,IAAIxB,KAAKyB,0BA1CDQ,sBCPtBC,cAMF,SAAAA,EAAYtC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACIrC,EAAAC,OAAAW,EAAA,EAAAX,CAAAE,KAAAF,OAAAY,EAAA,EAAAZ,CAAAoC,GAAAvB,KAAAX,KAAMJ,KAPV2B,MAAQ,CACJY,OAAQ,GACRC,OAAQ,KAMRvC,EAAKwC,MAAQC,IAAMC,YAFvB1C,yEAIU2C,GAUN,GATCvC,QAAQC,IAAI,YAAYsC,GAIrBxC,KAAKyC,QACNzC,KAAKyC,OAAOC,UAAUC,OAAO,UAI5BH,EAAMxC,KAAKJ,MAAMgD,MAAO,CACxB,IAAIC,EAAK7C,KAAK8C,KAAK,KAAON,GAC1BK,EAAGH,UAAUK,IAAI,UACjB/C,KAAKyC,OAASI,8CAIHG,EAAEC,GAIjB,IAAMC,EAAQlD,KAAKqC,MAAMc,QAAQC,YAE7BjB,EAASe,EAAQ,EAAI,EACzBjD,QAAQC,IAAI,SAAUiC,GAGtB,IAFA,IAAIkB,EAAW,EAAEC,KAAKC,GAAKvD,KAAKJ,MAAMgD,MAE7BY,EAAI,EAAIA,EAAIxD,KAAKJ,MAAMgD,MAAQY,IAAK,CACzC,IAAIC,EAAKzD,KAAKuB,MAAMY,OAASmB,KAAKI,IAAIL,EAAWG,GAC7CG,GAAM3D,KAAKuB,MAAMY,OAASmB,KAAKM,IAAIP,EAAWG,GAGlDxD,KAAK8C,KAAK,KAAOU,GAAGK,MAAMC,SAAW,WACrC9D,KAAK8C,KAAK,KAAOU,GAAGK,MAAME,KAAeb,EAAM,EAAX,GAAeO,EAAI,KACtDzD,KAAK8C,KAAK,KAAOU,GAAGK,MAAMG,IAAM,GAAML,EAAI,0CAIvCM,GAGR,IAFA,IAAI7D,EAAI,GAECoD,EAAI,EAAIA,EAAIxD,KAAKJ,MAAMgD,MAAQY,IAEpCpD,EAAE8D,KAAKC,EAAAnB,EAAAoB,cAAA,MAAIC,IAAK,KAAOb,GAAIA,EAAE,IAEjC,OAAOpD,mCAIP,OAAQ+D,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,KAAWH,EAAAnB,EAAAoB,cAAA,MAAIC,IAAKrE,KAAKqC,MAAOkC,UAAU,YAAYV,MAAO,CAAEzB,OAAQpC,KAAKuB,MAAMa,SAAUpC,KAAKwE,uBA5DzFvC,aAgETC,IAEfA,EAAUuC,aAAe,CACrB7B,MAAO,OC7DL8B,cA4BL,SAAAA,EAAY9E,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0E,IAClB7E,EAAAC,OAAAW,EAAA,EAAAX,CAAAE,KAAAF,OAAAY,EAAA,EAAAZ,CAAA4E,GAAA/D,KAAAX,KAAMJ,KA3BP+E,YAAc,CAAC,KAAM,MAAO,MA0BT9E,EAxBnB+E,mBAAgBlD,EAwBG7B,EAtBnBgF,YAAc,EAsBKhF,EArBnBiF,aAAe,EAqBIjF,EAlBnBkF,MAAQ,CAAC,KAAM,MAAM,MAAM,OAkBRlF,EAhBnB0B,MAAQ,CAIPyD,WAAW,GAYOnF,EARnBoF,QAAU,CAACnE,EAAYC,UAQJlB,EAPnBS,QAAU,GAOST,EALnBqB,YAAc,GAKKrB,EAHnBqF,KAAO,KAGYrF,EAqDnBsF,OAAS,SAACC,GACT,IAAI5C,EAAM3C,EAAKgF,cAAgBhF,EAAKiF,aAEhCO,EAAOxF,EAAKkF,MAAMvC,GACtBvC,QAAQC,IAAI,YAAamF,EAAMD,GAE/BvF,EAAK+E,cAAcU,gBAAgBC,qBAAqBF,EAAM,KAAMD,GACpE,IAAII,EAAY3F,EAAK2F,UAErBC,IAAKC,KAAKC,SAAS,kBAAMH,EAAUhD,IAAM4C,IA9DvBvF,EAqGnB+F,OAAS,SAAAC,GACRJ,IAAKK,UAAUD,IAAIE,MAAQF,GAtGThG,EAyGnBmG,gBAAkB,SAAAC,GAOX,IANNhG,QAAQC,IAAI,gCAAiC+F,GAG7CpG,EAAKiF,aAAemB,EAGPpG,EAAKkF,MAAMmB,OAASD,GAChCpG,EAAKkF,MAAMoB,MAIZ,KAAOtG,EAAKkF,MAAMmB,OAASD,GAC1BpG,EAAKkF,MAAMb,KAAKpD,EAAYC,UAG7B0E,IAAKK,UAAUM,cAAgB,CAACH,EAAQ,GAExCpG,EAAKwG,SAAS,CAACvB,aAAcmB,KA3HXpG,EA8HnB2F,UAAY,SAACX,GACZ5E,QAAQC,IAAI,wBAAyB2E,EAAaY,IAAKK,UAAUQ,UAGjEzG,EAAKiD,KAAKyD,IAAIC,UAAU3B,IAlINhF,EAqInB4G,SAAW,SAACrB,EAAMC,GACjBxF,EAAK+E,cAAcU,gBAAgBC,qBAAqBF,EAAM,KAAMD,IAtIlDvF,EA2InB6G,QAAU,aA3IS7G,EAqUnB8G,OAAS,WACR,OAAOlB,IAAKK,UAAUD,IAAIE,OA5T1BlG,EAAK+E,cAAgB,IAAIvD,EAAcxB,EAAKD,MAAMgH,YAVhC/G,+EAclB,MAAM,IAAImC,MAAM,0EAIG,IAAA6E,EAAA7G,MAEP,IAAIyF,IAAKqB,OAAQjF,WACvB0D,qBAAqB,MAE3BE,IAAKsB,OAAOC,GAAG,QAAS,kBAAMH,EAAKI,kBAEnCxB,IAAKK,UAAUkB,GAAG,OAAQ,kBAAM/G,QAAQC,IAAI,mBAC5CuF,IAAKK,UAAUkB,GAAG,QAAS,kBAAM/G,QAAQC,IAAI,qBAC7CuF,IAAKK,UAAUkB,GAAG,QAAS,kBAAM/G,QAAQC,IAAI,oBAC7CuF,IAAKK,UAAUkB,GAAG,OAAQ,kBAAM/G,QAAQC,IAAI,oBAE5CuF,IAAKyB,QAAQC,YAAc,WAE3B,IAAIhC,EAAUnF,KAAKmF,OAOnBM,IAAKK,UAAUsB,eAAe,SAAChC,GAAD,OAAUD,EAAOC,IAAO,KAAM,GAE5DpF,KAAKqH,aAAe,IAAI5B,IAAK6B,MAAM,SAASlC,EAAMmC,GACjDtH,QAAQC,IAAI,qBAAqBkF,GACjCmC,KACEvH,KAAKJ,MAAM4H,WAEdxH,KAAKqH,aAAaI,MAAO,wCA2BZC,GACb1H,KAAK4E,cAAc7C,cAAc2F,yEA0HvBC,GACV1H,QAAQC,IAAI,iBAAkByH,GAC9B3H,KAAKqH,aAAaO,SAGlB5H,KAAKqH,aAAaQ,WAAaF,EAE/B3H,KAAKqH,aAAaS,QAAU9H,KAAKqH,aAAaQ,WAAa,IAC3D7H,KAAKqH,aAAaI,MAAO,EACzBzH,KAAKqH,aAAaU,MAAQ/H,KAAKqH,aAAaQ,WAAa,wCAE/CG,GAIVhI,KAAKiF,QAAU+C,EAEf,IAAK,IAAIxE,EAAI,EAAGA,EAAIxD,KAAK+E,MAAMmB,OAAQ1C,IAAK,CAE3C,IAAI6B,EAAOrF,KAAK2E,YAAY7D,EAAYE,eAIjBU,IAAtBsG,EAAexE,IACfwE,EAAexE,KAAO1C,EAAYC,SAElCsE,EAAOrF,KAAK2E,YAAY7D,EAAYC,eAEdW,IAAtBsG,EAAexE,IACfwE,EAAexE,KAAO1C,EAAYG,WAElCoE,EAAOrF,KAAK2E,YAAY7D,EAAYG,WAErCjB,KAAK+E,MAAMvB,GAAK6B,+CAIE2C,GAInBhI,KAAKiF,QAAU+C,EAIVhI,KAAKkF,KAIV,IAAK,IAAI1B,EAAI,EAAGA,EAAIxD,KAAKkF,KAAKgB,OAAQ1C,IAAK,CAE1C,IAAI6B,EAAOrF,KAAK2E,YAAY7D,EAAYE,eAIjBU,IAAtBsG,EAAexE,IACfwE,EAAexE,KAAO1C,EAAYC,SAElCsE,EAAOrF,KAAK2E,YAAY7D,EAAYC,eAEdW,IAAtBsG,EAAexE,IACfwE,EAAexE,KAAO1C,EAAYG,WAElCoE,EAAOrF,KAAK2E,YAAY7D,EAAYG,WAErCjB,KAAKkF,KAAK+C,GAAG,KAAOzE,EAAG6B,qCAMxB,OACClB,EAAAnB,EAAAoB,cAAA,OAAKP,MAAO,CAACX,MAAO,SACnBiB,EAAAnB,EAAAoB,cAAA,wBAAwC,IAAzBpE,KAAKuB,MAAMyD,UAAqB,UAAY,WAC3Db,EAAAnB,EAAAoB,cAAC8D,EAAD,CAAW7D,IAAI,MAAMzB,MAAO5C,KAAKuB,MAAMuD,+CAiBzC7E,QAAQC,IAAI,wBACZF,KAAKqG,SAAS,CAAErB,WAAW,IAC3BhF,KAAK6E,YAAc,EAEnBY,IAAKK,UAAUqC,uCAQflI,QAAQC,IAAI,yBAGZF,KAAKqG,SAAS,CAAErB,WAAW,IAE3BS,IAAKK,UAAUiC,MAAM,eA5UI9F,aAsWZyC,IAGfA,EAAaD,aAAe,CAC3BK,aAAc,EACd0C,UAAW,MCnXL,IAAMY,EAAY,CACxBC,OAAQ,SACRC,QAAS,WCcKC,6MAZXhH,MAAQ,2EAEJ,OAAS4C,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,kBAC1BJ,EAAAnB,EAAAoB,cAAA,OAAKG,UAAU,MAAMV,MAAO,CAACX,MAAOlD,KAAKJ,MAAMmG,MAAS,IAAKyC,QAAS,mBAJrDvG,aCGvBwG,6MACLlH,MAAQ,CACPoG,KAAM,GACNe,aAAc,KAGfC,MAAQ,CACPtE,IAAK,KACLuE,UAAW,QAEZC,aAAe,IACfC,2BAA6B,KAwN7BC,YAAc,WACb9I,QAAQC,IAAI,wBACRL,EAAKD,MAAMoJ,UAEdnJ,EAAKD,MAAMoJ,cAsBbC,UAAY,SAAAhG,GACX,IAAMiG,EAAMrJ,EAAK0B,MAAM4H,cAAgBlG,EAAEmG,KAAO,eAAiB,GACjE,OACCjF,EAAAnB,EAAAoB,cAAA,OACCiF,QAAS,kBAAMxJ,EAAKyJ,YAAYrG,EAAEmG,OAClC7E,UAAW,QAAU2E,EACrB/I,IAAK,OAAS8C,EAAE4C,UAEOnE,IAAtBuB,EAAEsG,gBACA1J,EAAK2J,WAAWvG,EAAEsG,gBAAgBE,QAAQ,IAC1CxG,EAAEyG,IAAM,SAAU,IAPtB,MAQKzG,EAAE4C,IAAI4D,QAAQ,6EA3PZE,GAER,IAAMC,EAAMD,EAAEE,SAAS,GACjBC,EAAMH,EAAEE,SAAS,GAEnBE,EAAW,GACXlE,EAAM+D,EAEV,GAAID,EAAEK,WAAa5B,EAAUC,OAC5B,KAAOxC,GAAOiE,GAAK,CAClB,IAAIG,EAAU,CACbpE,IAAKA,EACL6D,IAAKC,EAAEO,UAERH,EAAS7F,KAAK+F,GACdpE,GAAO8D,EAAEQ,aAMV,KAAOtE,GAAOiE,GAAK,CAClB,IAAIG,EAAU,CACb7E,KAHM,EAGIuE,EAAEO,SACZnC,MAJM,EAIK4B,EAAEO,SACbR,IALM,EAKGC,EAAEO,SAAWP,EAAEO,SACxBrE,IAAKA,GAENkE,EAAS7F,KAAK+F,GACdpE,GAAO8D,EAAEQ,QAOX,OAAOJ,kCAIAK,GAAe,IAAAvD,EAAA7G,KAChBqK,EAAOrK,KAAKsK,SAASF,GAE3BnK,QAAQC,IAAI,mBAAoBmK,GAChC,IAAI1C,EAAO,GAEP4C,EAAgB,EACdP,EAAWI,EAAcJ,SAE/B,GAAII,EAAcJ,WAAa5B,EAAUC,OACxC,IAAK,IAAI7E,EAAI,EAAGA,EAAI6G,EAAKnE,OAAQ1C,IAAK,CACrC,IAAMgH,EAAM,CACX3E,IAAKwE,EAAK7G,GAAGqC,IACb6D,IAAKW,EAAK7G,GAAGkG,IACbN,KAAMpJ,KAAK6I,gBAGZ0B,GAAiB,GAAKF,EAAK7G,GAAGqC,IAAOuE,EAActF,aAAeuF,EAAK7G,GAAGkG,IAC1E/B,EAAKzD,KAAKsG,QAGX,IAAShH,EAAI,EAAGA,EAAI6G,EAAKnE,OAAQ1C,IAAK,CACrC,IAAMgH,EAAM,CACXpF,KAAMiF,EAAK7G,GAAG4B,KACdqF,QAASJ,EAAK7G,GAAGkG,IACjBH,gBAAiBc,EAAK7G,GAAGkG,IAAMW,EAAK7G,GAAG4B,KACvCsF,mBAAoB1K,KAAKwJ,WAAWa,EAAK7G,GAAGuE,OAC5C4C,iBAAkB3K,KAAKwJ,WAAWa,EAAK7G,GAAGkG,KAC1C7D,IAAKwE,EAAK7G,GAAGqC,IACbuD,KAAMpJ,KAAK6I,gBAGZ0B,GAAiBF,EAAK7G,GAAGkG,IAEzB/B,EAAKzD,KAAKsG,GAKZxK,KAAK6I,aAAe,EAEpB7I,KAAKqG,SACJ,SAAAuE,GAAS,MAAK,CACZL,cAAgBA,EACjBpB,YAAa,EACbxB,KAAMA,EACNqC,SAAUA,IAEX,kBAAMnD,EAAKkC,+CAKZ9I,QAAQC,IAAI,UAAWF,KAAKJ,MAAMiL,SAC9B7K,KAAK2I,QAERmC,cAAc9K,KAAK2I,MAAMtE,KACzBrE,KAAK2I,WAAQjH,GAIV1B,KAAK+K,0BACR9K,QAAQC,IAAI,oCACZ4K,cAAc9K,KAAK+K,yBACnB/K,KAAK+K,6BAA0BrJ,GAEhC1B,KAAKgL,iDAML,GADA/K,QAAQC,IAAI,uBACRF,KAAKJ,MAAMiL,QACd5K,QAAQC,IAAI,2DADb,CAIA,IAAIiJ,EAAcnJ,KAAKuB,MAAM4H,YAG7B,GAAIA,EAAc,GAAKnJ,KAAKuB,MAAMoG,KAAKzB,OAOtC,OANAjG,QAAQC,IAAI,gCACRF,KAAK2I,QACRmC,cAAc9K,KAAK2I,MAAMtE,KACzBrE,KAAKoF,UAAO1D,QAEb1B,KAAKJ,MAAMqL,UAAU,MAItBhL,QAAQC,IAAI,6BAA+BiJ,EAAc,GACzDnJ,KAAKqG,SAAS,CAAE8C,YAAaA,EAAc,IAE3CnJ,KAAKJ,MAAMqL,UAAUjL,KAAKuB,MAAMoG,KAAK3H,KAAKuB,MAAM4H,+CAGzC,IAAA+B,EAAAlL,KAcP,GAbAC,QAAQC,IAAI,oBAGRF,KAAK2I,QAERmC,cAAc9K,KAAK2I,MAAMtE,KACzBrE,KAAK2I,MAAMtE,SAAM3C,EACjB1B,KAAK2I,MAAMC,UAAY,KACvB5I,KAAKgL,aAKFhL,KAAKuB,MAAMyI,WAAa5B,EAAUE,QAAS,CAG9C,IAAMlD,EACL,KACCpF,KAAKuB,MAAMoG,KAAK3H,KAAKuB,MAAM4H,aAAasB,QACxCzK,KAAKuB,MAAMoG,KAAK3H,KAAKuB,MAAM4H,aAAa/D,MACtC+F,EAAanL,KAAKmL,WAAWC,KAAKpL,MACtCC,QAAQC,IAAI,mBAAoBkF,GAEhCpF,KAAK2I,MAAQ,CACZtE,IAAKgH,YAAYF,EAAY/F,GAC7BwD,UAAW,IAAI0C,MAKZtL,KAAK+K,0BACT/K,KAAK+K,wBAA0BM,YAAY,kBAAMH,EAAKK,sBAAsBvL,KAAK8I,sEAKlE0C,GAEfxL,KAAKwL,MAAQA,+CAKd,IAAIxL,KAAKJ,MAAMiL,QAAf,CAIA,IAAML,EAAMxK,KAAKyL,gBACbnF,EAAW,EAEf,GAAItG,KAAKuB,MAAMyI,WAAa5B,EAAUC,OACrC/B,EAAYtG,KAAKwL,MAAMlF,cASvBA,GAJUgF,KAAKI,MAAQ1L,KAAK2I,MAAMC,UAAU+C,UAGhBnB,EAAIjB,gBAAkBiB,EAAIpB,KAAS,KACpCoB,EAAIjB,gBAAmB,IAK/CjD,EAAW,IACdA,EAAW,GAGZtG,KAAKqG,SAAS,CAACqC,aAAepC,qCAI9BtG,KAAK6I,aAAe,EACpB7I,KAAKqG,SAAS,CAAEsB,KAAM,GAAIwB,YAAa,IACvCnJ,KAAK+I,kDAYL/I,KAAKqG,SAAS,CAAE8C,YAAa,IAC7BnJ,KAAKJ,MAAMqL,UAAUjL,KAAKuB,MAAMoG,KAAK,4CAIrC,GAAI3H,KAAKuB,MAAM4H,aAAenJ,KAAKuB,MAAMoG,KAAKzB,OAC7C,MAAM,IAAIlE,MAAM,0CAEjB,OAAOhC,KAAKuB,MAAMoG,KAAK3H,KAAKuB,MAAM4H,iDAGvB3G,GAAK,IAAAoJ,EAAA5L,KAChBA,KAAKqG,SAAS,CAAE8C,YAAa3G,GAAO,kBACnCoJ,EAAKhM,MAAMqL,UAAUW,EAAKrK,MAAMoG,KAAKiE,EAAKrK,MAAM4H,iDAoBzC,IAAA0C,EAAA7L,KAGR,OAA+B,IAA3BA,KAAKuB,MAAMoG,KAAKzB,OACZ/B,EAAAnB,EAAAoB,cAAA,sBAIPD,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,WAEpBJ,EAAAnB,EAAAoB,cAAC0H,EAAD,CAAgB/F,MAAkC,IAA3B/F,KAAKuB,MAAMmH,eAClCvE,EAAAnB,EAAAoB,cAAA,OAAKP,MAAO7D,KAAKJ,MAAMiL,QAAU,CAAEkB,QAAS,IAAQ,IAClD/L,KAAKuB,MAAMoG,KAAKqE,IAAI,SAAAxB,GAAG,OAAIqB,EAAK5C,UAAUuB,MAE5CrG,EAAAnB,EAAAoB,cAAA,0BAAkBpE,KAAKwJ,WAAWxJ,KAAKuB,MAAMgJ,iDAKxC0B,GACP,OAAOA,EAAI,GAAK,IAAMA,EAAIA,qCAGhBC,GAEV,IAAID,EAAI,IAAIX,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCW,EAAEE,WAAWD,GACb,IACI9L,EAAI,GAMR,OALU,IAFF6L,EAAEG,eAGThM,GAAK6L,EAAEG,aACPhM,GAAK,KAENA,GAAUJ,KAAKqM,QAAQJ,EAAEK,cAAgB,WA9SrBrK,aAmTPwG,IAEfA,EAAQhE,aAAe,CACtBuF,SAAU5B,EAAUC,OACpBc,YAAa,6GChSCoD,mLAdP,OACIpI,EAAAnB,EAAAoB,cAAA,WAAAtE,OAAA0M,EAAA,EAAA1M,QAAAY,EAAA,EAAAZ,CAAAyM,EAAAE,WAAA,SAAAzM,MAAAW,KAAAX,MAEImE,EAAAnB,EAAAoB,cAAA,WAAKD,EAAAnB,EAAAoB,cAACsI,EAAA,EAAD,CAAQrD,QAASrJ,KAAK2M,aAAcpI,UAAU,OAAOvE,KAAKuB,MAAMwE,wDAbxD6G,KCQdC,mLAPP,OAAQ1I,EAAAnB,EAAAoB,cAAA,WAAAtE,OAAA0M,EAAA,EAAA1M,QAAAY,EAAA,EAAAZ,CAAA+M,EAAAJ,WAAA,SAAAzM,MAAAW,KAAAX,MAEJmE,EAAAnB,EAAAoB,cAACsI,EAAA,EAAD,CAAOrD,QAASrJ,KAAK2M,aAAcpI,UAAU,OAAOvE,KAAKuB,MAAMuL,OAAO,GAAtE,MAA6E9M,KAAKuB,MAAMuL,OAAO,YAJ/EC,sBC2GbC,cApGd,SAAAA,EAAYpN,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgN,IAClBnN,EAAAC,OAAAW,EAAA,EAAAX,CAAAE,KAAAF,OAAAY,EAAA,EAAAZ,CAAAkN,GAAArM,KAAAX,KAAMJ,KANP2B,MAAQ,CACPoG,KAAM,IAIY9H,EADnBoF,QAAU,CAACnE,EAAYC,SAASD,EAAYE,SAASF,EAAYG,UAC9CpB,EAyEnB2E,YAAc,SAAAmD,GACb,OAAOA,EAAKqE,IAAI,SAACxB,EAAIhI,GAAL,OACf2B,EAAAnB,EAAAoB,cAAC6I,EAAA,EAAD,CACCC,KAAK,KACJC,MAAOtN,EAAKuN,YAAY5C,GAEzBrK,IAAK,UAAYqC,EACjB6G,QAAS,kBAAMxJ,EAAKwN,gBAAgB7K,KAGnCA,EAAM,MAjFT3C,EAAK0B,MAAMoG,KAAO9H,EAAKyN,YAAY1N,EAAM2N,cAGzC1N,EAAK0B,MAAMoG,KAAK,GAAK7G,EAAYC,SALflB,2EAQP2N,GAKX,IAHA,IAAIC,EAASzN,KAAK0N,WAEb/F,EAAO,GACHnE,EAAI,EAAGA,EAAIgK,EAAQhK,IAC3BmE,EAAKzD,UAAoBxC,IAAf+L,EAAOjK,GAAoBiK,EAAOjK,GAAK1C,EAAYE,UAE9D,OAAO2G,wCAGM6F,GACb,IAAI7F,EAAO3H,KAAKsN,YAAYE,GAE5BxN,KAAKqG,SAAS,CAAEsB,KAAK7H,OAAA6N,EAAA,EAAA7N,CAAK6H,IAAU3H,KAAKJ,MAAMgO,kDAGrCC,GACV7N,KAAKqG,SAAS,CAACsB,KAAMkG,4CAGNC,GAEf,IAAMC,EAAO/N,KAAKuB,MAAMoG,KAAKmG,GAGzBE,EAAUhO,KAAKiF,SAAS8I,EAAO,GAAM,GAEzC/N,KAAKuB,MAAMoG,KAAKmG,GAAYE,EAC5BhO,KAAKiO,iDAaL,OAAOjO,KAAKuB,MAAMoG,yCAQPoG,GACX,IAAIZ,EACJ,OAAQY,GACP,KAAKjN,EAAYE,SAChBmM,EAAQ,YACR,MACD,KAAKrM,EAAYG,SAChBkM,EAAQ,UACR,MACD,QACCA,EAAQ,UAEV,OAAOA,mCAkBC,IAEAS,EAAkB5N,KAAKJ,MAAvBgO,cAER,OACCzJ,EAAAnB,EAAAoB,cAAC8J,EAAA,EAAD,CAAa7E,QAASuE,GACpB5N,KAAKwE,YAAYxE,KAAKuB,MAAMoG,cApGR1F,aCFZkM,EAAa,CACtB,CACIC,MAAO,uBACPtJ,aAAc,EACdkF,SAAU5B,EAAUC,OACpB6B,SAAU,EACVC,QAAS,GACTN,SAAU,CAAC,IAAK,KAChB5E,QAAS,CAAC,EAAG,EAAG,EAAG,IAEvB,CACFmJ,MAAO,sBACPtJ,aAAc,EACd+E,SAAU,CAAC,IAAK,KACV5E,QAAS,CAAC,EAAG,EAAG,EAAG,EAAE,GACrB+E,SAAU5B,EAAUE,QACpB4B,SAAU,GACVC,QAAS,IAEb,CACIiE,MAAO,UACPxH,WAAY1F,EAAYC,MAC9B2D,aAAc,GACd+E,SAAU,CAAC,IAAK,KACV5E,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrC+E,SAAU5B,EAAUE,QACpB4B,SAAU,IACVC,QAAS,KCGFkE,6MA5Bd9M,MAAQ,KAGR+M,QAAUH,+EAEII,GAEbvO,KAAKJ,MAAM4O,SAASD,oCAEZ,IAAA1H,EAAA7G,KACR,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,kBACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KAEEzO,KAAKsO,QAAQtC,IAAI,SAAC0C,EAAMlM,GAAP,OACjB2B,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,CAAKpK,UAAU,SACd8E,QAAS,kBAAMxC,EAAK+H,cAAcF,IAClCvO,IAAK,UAAYqC,GAEhBkM,EAAKN,kBApBgBnM,aCDvB4M,mLAEE,OAAS1K,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAW,QAAUvE,KAAKJ,MAAM2E,WAChDJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAcvE,KAAKJ,MAAMwO,OACxCjK,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KAAKtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,CAAKpK,UAAU,aAAavE,KAAKJ,MAAMkP,mBAJ9B7M,aASX4M,IAGfA,EAAYpK,aAAe,CACvB2J,MAAO,QACPU,SAAU,GACVvK,UAAW,0BCZTwK,6MACLxN,MAAQ,CACPyI,SAAU5B,EAAUE,QACpB6B,QAAS,GACH6E,qBAAqB,EACrBC,eAAgB,EAChBC,cAAe,+EAGTC,GACNnP,KAAKqG,SAAS,CAAE2D,SAAUmF,GAAWnP,KAAKJ,MAAMgO,yDAItD5N,KAAKqG,SAAS,SAAAuE,GAAS,MAAK,CAC3BoE,qBAAsBpE,EAAUoE,+DAIlBjJ,GACf/F,KAAKqG,SAAS,CAAE8D,QAASpE,GAAS/F,KAAKJ,MAAMgO,kDAS7C,MALc,CACJ5D,SAAUhK,KAAKuB,MAAMyI,SACrBE,SAAUlK,KAAKuB,MAAMyI,WAAa5B,EAAUC,OAASrI,KAAKuB,MAAM2N,cAAgBlP,KAAKuB,MAAM0N,eAC3F9E,QAASnK,KAAKuB,MAAM4I,0CAKtB/J,GAERJ,KAAKqG,SAAS,CACb2D,SAAU5J,EAAE4J,SACZG,QAAS/J,EAAE+J,QACX+E,cAAe9O,EAAE4J,WAAa5B,EAAUC,OAASjI,EAAE8J,SAAWlK,KAAKuB,MAAM2N,cACzED,eAAgB7O,EAAE4J,WAAa5B,EAAUE,QAAUlI,EAAE8J,SAAWlK,KAAKuB,MAAM0N,gBAEzEjP,KAAKJ,MAAMgO,qDAIEwB,GACV,IAAI7N,EAAQ,GACZA,EAAM6N,EAAEC,OAAOC,MAAQC,OAAOH,EAAEC,OAAOtJ,OACvC/F,KAAKqG,SAAS9E,EAAOvB,KAAKJ,MAAMgO,gDAG9B,IAAA/G,EAAA7G,KACR,OACCmE,EAAAnB,EAAAoB,cAACoL,EAAD,CAAapB,MAAM,OAAO7J,UAAU,aACnCJ,EAAAnB,EAAAoB,cAAC8J,EAAA,EAAD,KACC/J,EAAAnB,EAAAoB,cAAC6I,EAAA,EAAD,CACC5D,QAAS,kBAAMxC,EAAK4I,aAAarH,EAAUC,SAC3CqH,OAAQ1P,KAAKuB,MAAMyI,WAAa5B,EAAUC,QAF3C,UAMAlE,EAAAnB,EAAAoB,cAAC6I,EAAA,EAAD,CACC5D,QAAS,kBAAMxC,EAAK4I,aAAarH,EAAUE,UAC3CoH,OAAQ1P,KAAKuB,MAAMyI,WAAa5B,EAAUE,SAF3C,YAODnE,EAAAnB,EAAAoB,cAACuL,EAAA,EAAD,CAAUC,OAAQ5P,KAAKuB,MAAMyI,WAAa5B,EAAUC,QACnDlE,EAAAnB,EAAAoB,cAAA,kCACcD,EAAAnB,EAAAoB,cAACyL,EAAA,EAAD,CAAO3C,KAAK,KAAKoC,KAAK,gBAAgBtG,SAAU,SAACoG,GAAD,OAAOvI,EAAKiJ,cAAcV,IAAKrJ,MAAO/F,KAAKuB,MAAM2N,cAAenB,KAAK,SAAS3E,KAAK,MADjJ,SAIDjF,EAAAnB,EAAAoB,cAACuL,EAAA,EAAD,CAAUC,OAAQ5P,KAAKuB,MAAMyI,WAAa5B,EAAUE,SACnDnE,EAAAnB,EAAAoB,cAAA,kCACeD,EAAAnB,EAAAoB,cAACyL,EAAA,EAAD,CAAOE,OAAO,KAAKT,KAAK,iBAAiBtG,SAAU,SAACoG,GAAD,OAAOvI,EAAKiJ,cAAcV,IAAIrJ,MAAO/F,KAAKuB,MAAM0N,eAAgBrF,IAAK,EAAGE,IAAK,IAAKiE,KAAK,SAAS3E,KAAK,MADvK,YArBF,oBA0BajF,EAAAnB,EAAAoB,cAAC4L,EAAA,EAAD,CAAgBD,OAAO,KAAKlM,MAAO,CAACoM,OAAQ,WACtDL,OAAQ5P,KAAKuB,MAAMyN,oBACnBkB,OAAQ,kBAAMrJ,EAAKsJ,oBACnBhM,EAAAnB,EAAAoB,cAACgM,EAAA,EAAD,CAAgBC,OAAK,EAACnD,KAAK,MACzBlN,KAAKuB,MAAM4I,SAEbhG,EAAAnB,EAAAoB,cAACkM,EAAA,EAAD,KACCnM,EAAAnB,EAAAoB,cAACmM,EAAA,EAAD,CAAclH,QAAS,WAAOxC,EAAK2J,gBAAgB,KAAnD,KAGArM,EAAAnB,EAAAoB,cAACmM,EAAA,EAAD,CAAclH,QAAS,WAAOxC,EAAK2J,gBAAgB,MAAnD,MAGArM,EAAAnB,EAAAoB,cAACmM,EAAA,EAAD,CAAclH,QAAS,WAAOxC,EAAK2J,gBAAgB,MAAnD,MAGArM,EAAAnB,EAAAoB,cAACmM,EAAA,EAAD,CAAclH,QAAS,WAAOxC,EAAK2J,gBAAgB,MAAnD,MAGArM,EAAAnB,EAAAoB,cAACmM,EAAA,EAAD,CAAclH,QAAS,WAAOxC,EAAK2J,gBAAgB,MAAnD,QA7CJ,cApDqBvO,aA4GT8M,IAEfA,EAAUtK,aAAe,CACxBmJ,cAAe,UCkaD6C,6MAhgBd9H,MAAQ,CACP+H,SAAU,KACV9H,UAAW,QAGZrH,MAAQ,CACPsI,SAAU,CAAC,IAAK,KAIhB/E,aAAc,EACd6L,WAAY,GACZ/J,WAAY1F,EAAYE,YAExBwP,wBAAwB,EACxBC,mBAAmB,EACnBhG,SAAS,KAkXViG,qBAAuB,WAEtB,IAAMnH,EAAI9J,EAAKkR,aAEXpH,EAAE7E,eAAiBjF,EAAKiD,KAAKkO,GAAGlM,eACnCjF,EAAKiD,KAAKmO,WAAWC,cAAcvH,EAAE7E,cACrCjF,EAAKiD,KAAKkO,GAAGhL,gBAAgB2D,EAAE7E,kBAwBjCqM,eAAiB,SAAAC,GACZA,GACHnR,QAAQC,IAAI,kCAAmCkR,GAC/CvR,EAAK+F,OAAOwL,EAAQvL,OAIpBhG,EAAKiD,KAAKuO,QAAQlJ,OAClBtI,EAAKiD,KAAKkO,GAAG7I,WAIfvC,OAAS,SAAA0L,GACRzR,EAAKwG,SAAS,CAAEsK,WAAYW,IAC5BzR,EAAKiD,KAAKkO,GAAGpL,OAAO0L,MAGrBC,cAAgB,WACftR,QAAQC,IAAI,sBAGZ,IAAIsK,EAAM3K,EAAKiD,KAAKuO,QAAQ5F,gBAC5BxL,QAAQC,IAAI,kBAAmBsK,GAK/B3K,EAAKiD,KAAKkO,GAAGQ,WAAWhH,EAAId,MAAO,GAG/Bc,GACH3K,EAAK+F,OAAO4E,EAAI3E,KAIbhG,EAAKiD,KAAKkO,GAAGzP,MAAMyD,WACtBnF,EAAKiD,KAAKuO,QAAQtJ,WAmBpB0J,gBAAkB,WAEjBxR,QAAQC,IAEPL,EAAKiD,KAAKkO,GAAGzP,MAAMyD,YAGiB,IAAjCnF,EAAKiD,KAAKkO,GAAGzP,MAAMyD,WACtBnF,EAAKiD,KAAKuO,QAAQlJ,OAClBtI,EAAKiD,KAAKkO,GAAG7I,SAEbtI,EAAKiD,KAAKuO,QAAQtJ,QAClBlI,EAAKiD,KAAKkO,GAAGjJ,6FA9cd/H,KAAK8C,KAAKuO,QAAQK,QAAQ1R,KAAK+Q,cAI/B/Q,KAAK8C,KAAKuO,QAAQM,iBAAiB3R,KAAK8C,KAAKkO,GAAG3J,yDAM9BuK,GAClB5R,KAAK8C,KAAKkO,GAAGjP,cAAc6P,GAI3B5R,KAAKqG,SAAS,CAAEO,WAAYgL,8CAGX,IAAA/K,EAAA7G,KACjB,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,QACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAf,SAcAJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,CAAKkD,GAAI,GAAT,kBACA1N,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KACCxK,EAAAnB,EAAAoB,cAAC0N,EAAD,CACCzN,IAAI,eACJuF,IAAK,EACLE,IAAK,GACLyD,aAAcvN,KAAKuB,MAAMuD,aACzB8I,cAAe,kBAAM/G,EAAKiK,4BAgB7B3M,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,CAAKkD,GAAI,GAAT,WACA1N,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KACCxK,EAAAnB,EAAAoB,cAAC2N,EAAD,CACCnE,cAAe,kBAAM/G,EAAKmL,mBAC1B3N,IAAI,aACJkJ,aAAcvN,KAAKuB,MAAMuD,4DAQb,IAAAoG,EAAAlL,KAEjB,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,QACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAf,SACAJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,CAAKkD,GAAG,KAAR,OAEA1N,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KACCxK,EAAAnB,EAAAoB,cAAC6N,EAAD,CACC5N,IAAI,WACJuF,IAAK,GACLE,IAAK,IACLyD,aAAc,CACbvN,KAAKuB,MAAMsI,SAAS,GACpB7J,KAAKuB,MAAMsI,SAAS,IAErBqI,UAAU,EACVtE,cAAe,kBAAM1C,EAAKiH,sEAQX,IAAAvG,EAAA5L,KACpB,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,QACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAf,YACAJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,CAAKkD,GAAG,KAAR,cACA1N,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KACCxK,EAAAnB,EAAAoB,cAAC4L,EAAA,EAAD,CACCJ,OAAQ5P,KAAKuB,MAAMqP,uBACnBV,OAAQ,kBAAMtE,EAAKwG,uBAEnBjO,EAAAnB,EAAAoB,cAACgM,EAAA,EAAD,CAAgBC,OAAK,GACnBrQ,KAAKuB,MAAMqF,YAEbzC,EAAAnB,EAAAoB,cAACkM,EAAA,EAAD,KACCnM,EAAAnB,EAAAoB,cAACmM,EAAA,EAAD,CACClH,QAAS,WACRuC,EAAKyG,mBACJnR,EAAYC,SAHf,SASAgD,EAAAnB,EAAAoB,cAACmM,EAAA,EAAD,CACClH,QAAS,WACRuC,EAAKyG,mBACJnR,EAAYE,eAHf,6DAsBN,IAAMG,EAAQvB,KAAK+Q,aACnB9Q,QAAQC,IAAI,0BAA2BqB,GACvCvB,KAAK8C,KAAKuO,QAAQK,QAAQnQ,GACtBA,EAAMyI,WAAa5B,EAAUC,QAChCrI,KAAK8C,KAAKkO,GAAGQ,WAAWjQ,EAAMoG,8CAO/B,OACCxD,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,KACCH,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAM3O,KAAKsS,uBAEZnO,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAM3O,KAAKuS,kBAEZpO,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,iDAOa,IAAA9C,EAAA7L,KAChB,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,KACCH,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAM3O,KAAKwS,oBAEZrO,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAKxK,EAAAnB,EAAAoB,cAACqO,EAAD,CACFpO,IAAI,YACJuJ,cAAe,kBAAM/B,EAAK6G,0BAI9BvO,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAM3O,KAAK2S,uBAEZxO,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAM3O,KAAK4S,kEAMM,IAAAC,EAAA7S,KACpB,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,QACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAf,WACAJ,EAAAnB,EAAAoB,cAAC0O,EAAD,CACCtE,SAAU,SAAAD,GAAM,OAAIsE,EAAKE,eAAexE,+CAM5B,IAAAyE,EAAAhT,KACf,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,QACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAf,iBACAJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KAAKtK,EAAAnB,EAAAoB,cAAC6O,EAAD,CACJ5O,IAAI,KACJS,aAAc9E,KAAKuB,MAAMuD,aACzB0C,UAAW,kBAAMwL,EAAKxL,aAEtBZ,WAAY5G,KAAKuB,MAAMqF,sDAMZ2H,GACdtO,QAAQC,IAAI,iBAAkBqO,GAI9BvO,KAAK8C,KAAK+G,SAASxD,SAAS,CAC3ByG,OAAQ,CAACyB,EAAO1E,SAAS,GAAI0E,EAAO1E,SAAS,MAE9C7J,KAAK8C,KAAKgC,aAAauB,SAAS,CAAEN,MAAOwI,EAAOzJ,eAChD9E,KAAK8C,KAAKmO,WAAWC,cAAc3C,EAAOzJ,cAC1C9E,KAAK8C,KAAKkO,GAAGhL,gBAAgBuI,EAAOzJ,cAGpC9E,KAAK8C,KAAKmO,WAAWiC,WAAW3E,EAAOtJ,SAGvCjF,KAAK8C,KAAKqQ,UAAUC,SAAS7E,4CAeb,IAAA8E,EAAArT,KAChB,OACCmE,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,QACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAf,QACAJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACkP,EAAD,CAECzI,QAAS7K,KAAKuB,MAAMsJ,QAEpB7B,SAAU,kBAAMqK,EAAK9B,iBACrBtG,UAAW,SAAA9B,GAAW,OACrBkK,EAAKlC,eAAehI,IAErB9E,IAAI,wDAQR,OACCF,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,KACCH,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KACCxK,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,QACpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAU,cAAf,OACAJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,CAAKlK,UAAWvE,KAAKuB,MAAMsJ,QAAU,SAAW,IAC/C1G,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,SAAO3O,KAAKuB,MAAMoP,WAAWlH,QAAQ,QAKzCtF,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAM3O,KAAKuT,wDAOJvT,KAAK+Q,aACT/G,WAAa5B,EAAUC,SAC5BpI,QAAQC,IAAI,qBACZF,KAAK8C,KAAKuO,QAAQlG,+CAeX,IAAAqI,EAAAxT,KACR,OACCmE,EAAAnB,EAAAoB,cAAA,OAAKG,UAAU,OACdJ,EAAAnB,EAAAoB,cAACE,EAAA,EAAD,CAAWC,UAAU,iBAEpBJ,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAEE3O,KAAKyT,kBAEPtP,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAAM3O,KAAK0T,iBACXvP,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KAEE3O,KAAK2T,oBAGRxP,EAAAnB,EAAAoB,cAACqK,EAAA,EAAD,KACCtK,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KACCxK,EAAAnB,EAAAoB,cAAC6I,EAAA,EAAD,CACC5D,QAAS,kBAAMmK,EAAK/B,mBACpBmC,OAAK,GAFN,iBAODzP,EAAAnB,EAAAoB,cAACuK,EAAA,EAAD,KACCxK,EAAAnB,EAAAoB,cAAC6I,EAAA,EAAD,CAAQ5D,QAAS,kBAAMmK,EAAKK,iBAA5B,kDAcL7T,KAAK8C,KAAKkO,GAAG8C,iDAIb9T,KAAKqG,SAAS,CAAEwE,SAAU7K,KAAKuB,MAAMsJ,qDAqBrC,IAAMlB,EAAI3J,KAAK+Q,aAEdpH,EAAEE,SAAS,KAAO7J,KAAKuB,MAAMsI,SAAS,IACtCF,EAAEE,SAAS,KAAO7J,KAAKuB,MAAMsI,SAAS,KAKtC7J,KAAKqG,SAAS,CAAEwD,SAAUF,EAAEE,WAE5B7J,KAAK8C,KAAKuO,QAAQK,QAAQ/H,iDAqD3B3J,KAAKqG,SAAS,SAAAuE,GAAS,MAAK,CAC3BgG,wBAAyBhG,EAAUgG,+DAgCpC,IAAMmD,EAAK,CACVlK,SAAU7J,KAAK8C,KAAK+G,SAAS6D,WAC7B5I,aAAc9E,KAAK8C,KAAKgC,aAAa4I,WACrCzI,QAASjF,KAAK8C,KAAKmO,WAAWvD,YAGzBsG,EAAKhU,KAAK8C,KAAKqQ,UAAUzF,WAK/B,OAHW5N,OAAAmU,EAAA,EAAAnU,CAAA,GAAQiU,EAAOC,6CAO1BhU,KAAK8C,KAAKkO,GAAGkC,WAAWlT,KAAK8C,KAAKmO,WAAWvD,mBA7f7BzL,aCVEiS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQrQ,EAAAnB,EAAAoB,cAACqQ,EAAD,MAAWC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.27903965.chunk.js","sourcesContent":["import {Sampler} from 'tone'\r\n\r\n\r\nclass SoundMachineInstrument extends Sampler {\r\n\r\n    constructor(props) {\r\n        console.log('<SoundMachineInstrument>constructor', props.key)\r\n        var o = {\r\n            \"C3\" : props.samples[0],\r\n            \"C#3\" : props.samples[1],\r\n            \"D3\" : props.samples[2],\r\n        };\r\n        super(o,{\r\n            baseUrl: props.baseUrl || './audio/' + props.key + '/'\r\n        });\r\n        this.key = props.key;\r\n    }\r\n}\r\n\r\nexport default SoundMachineInstrument;\r\n\r\n ","export const accentTypes = {\r\n\tACCENT_1: 0,\r\n\tACCENT_2: 1,\r\n\tACCENT_3: 2\r\n};","import React, { Component } from \"react\";\r\nimport SoundMachineInstrument from \"./SoundMachineInstrument\"\r\n\r\nexport const instruments = {\r\n\tTABLA: \"tabla\",\r\n\tELECTRO_KIT: \"electrokit\"\r\n\t// ACOUSTIC_KIT: \"acoustic_kit\"\r\n};\r\n\r\nclass InstrumentLib extends Component {\r\n\tstate = {};\r\n    lib = {};\r\n    currentInstrument = undefined\r\n\r\n\r\n    constructor(defaultInstrument) {\r\n        super();\r\n    \r\n        //Tone.Buffer.on(\"load\", () => this.onBufferLoaded());\r\n\t\tvar tabla = new SoundMachineInstrument({\r\n            key: instruments.TABLA,\r\n            label: \"Tabla\",\r\n\t\t\tsamples: [\"dha-slide.wav\", \"dhin-slide.wav\", \"tin.wav\"]\r\n        }).toMaster();\r\n        \r\n        this.lib[ tabla.key ] = tabla;\r\n    \r\n        var electro = new SoundMachineInstrument({\r\n            key: instruments.ELECTRO_KIT,\r\n            label: 'Electronic Kit',\r\n\t\t\tsamples: [\"Kick.wav\", \"HiHat.wav\", \"Snare.wav\"]\r\n        }).toMaster();\r\n        \r\n        this.lib[ electro.key ] = electro;\r\n\r\n        this.setInstrument(defaultInstrument)\r\n        \r\n        console.log('<InstrumentLib>done constructor')\r\n    }\r\n\r\n    setInstrument(key) {\r\n        if (this.lib[key] === undefined) {\r\n            throw new Error(\"InstrumentLib has no such instrument with given key: \" + key)\r\n        }\r\n        this.currentInstrument = key;\r\n    }\r\n \r\n    getInstrument() {\r\n        if (this.lib[this.currentInstrument] === undefined) {\r\n            throw new Error(\"There is no such instrument in InstrumentLib: \" + this.currentInstrument)\r\n        }\r\n        return this.lib[this.currentInstrument];\r\n    }\r\n\r\n\t// render() {\r\n\t// \treturn <div />;\r\n\t// }\r\n}\r\nexport default InstrumentLib;\r\n","import React, {Component} from 'react';\r\nimport {Container} from 'reactstrap'\r\nclass SimpleVis extends Component {\r\n    state = { \r\n        radius: 50,\r\n        height: 150\r\n    }\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n    }\r\n    setActive(idx)  {\r\n         console.log('setActive',idx)\r\n        // cap idx\r\n        // idx = idx % this.props.beats;\r\n\r\n        if (this.lastEl) {\r\n           this.lastEl.classList.remove('active')\r\n        }\r\n\r\n        // belts and braces \r\n        if (idx < this.props.beats) {\r\n            let el = this.refs[\"el\" + idx];\r\n            el.classList.add('active')\r\n            this.lastEl = el;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(a,b) {\r\n        //  console.log('<SimpleVis>componentDidUpdate');\r\n\r\n        // reposition elements\r\n        const width = this.myRef.current.offsetWidth;\r\n\r\n        let radius = width / 2 - 5;\r\n        console.log('radius', radius)\r\n        let radDelta = 2*Math.PI / this.props.beats;\r\n\r\n        for (let i = 0 ; i < this.props.beats ; i++) {\r\n            let x =  this.state.radius * Math.sin(radDelta * i);\r\n            let y =  -this.state.radius * Math.cos(radDelta * i);\r\n     \r\n  \r\n            this.refs[\"el\" + i].style.position = 'absolute';\r\n            this.refs[\"el\" + i].style.left =  - 20 + width/2 + x + 'px';  // hardcoded numbers determined visually\r\n             this.refs[\"el\" + i].style.top = 50 +  y + 'px';\r\n        }   \r\n    }\r\n\r\n    renderCells(cell) {\r\n        let o = [];\r\n        // console.log('radDelta',radDelta)\r\n        for (let i = 0 ; i < this.props.beats ; i++) {\r\n            \r\n            o.push(<li ref={\"el\" + i}>{i+1}</li>);\r\n        }\r\n        return o\r\n    }\r\n\r\n    render() {  \r\n        return (<Container><ul ref={this.myRef} className=\"SimpleVis\" style={{ height: this.state.height}}>{this.renderCells()}</ul></Container>);\r\n    }\r\n}\r\n \r\nexport default SimpleVis; \r\n\r\nSimpleVis.defaultProps = {\r\n    beats: 4\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Tone from \"tone\";\r\nimport SoundMachineInstrument from \"./SoundMachineInstrument\";\r\nimport { accentTypes } from \"./AccentTypes\";\r\nimport InstrumentLib, {instruments} from \"./InstrumentLib\";\r\nimport SimpleVis from \"./SimpleVis\"\r\n\r\n\r\nclass SoundMachine extends Component {\r\n\r\n\taccentNotes = [\"C3\", \"C#3\", \"D3\"]; // this stay in sync with AccentTypes\r\n\r\n\tinstrumentLib = undefined;\r\n\r\n\tcurrentBeat = 0;\r\n\tbeatsPerStep = 4;\t\r\n\r\n\r\n\tscore = [\"C3\", \"C#3\",\"C#3\",\"C#3\"];\r\n\r\n\tstate = {\r\n\t\t// currentBeat: 0,\r\n\t\t//isInitialized: false,\r\n\t\t// instrument: instruments.ELECTRO_KIT,\r\n\t\tisPlaying: false\r\n\t\t// cnt:0 \r\n\t};\r\n\r\n\taccents = [accentTypes.ACCENT_1]; // default with accent on first beat\r\n\tsamples = {};\r\n\r\n\tinstruments = {};\r\n\r\n\tpart = null;\r\n\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t// if (!props.beatsPerStep) {\r\n\t\t// \tthrow new Error(\"props.beatsPerStep is missing\");\r\n\t\t// }\r\n\t\t// this.state.beatsPerStep = props.beatsPerStep;\r\n\t\t// onAfterChange: null\r\n\t\t// onLoopEnd = props.onLoopEnd\r\n\r\n\t\t// init library\r\n\t\tthis.instrumentLib = new InstrumentLib(this.props.instrument)\r\n\t}\r\n\t\r\n\tonBufferError() {\r\n\t\tthrow new Error(\"Some buffers weren't found\")\r\n\t\t\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// reload/debug bell\r\n\t\tvar synth = new Tone.Synth().toMaster();\r\n\t\tsynth.triggerAttackRelease(\"A2\");\r\n\r\n\t\tTone.Buffer.on(\"error\", () => this.onBufferError());\r\n\r\n\t\tTone.Transport.on('stop', () => console.log('TRANSPORTstop'));\r\n\t\tTone.Transport.on('pause', () => console.log('TRANSPORT.pause'));\r\n\t\tTone.Transport.on('start', () => console.log('TRANSPORTstart'));\r\n\t\tTone.Transport.on('loop', () => console.log('TRANSPORT loop'));\r\n\t\t\r\n\t\tTone.context.latencyHint = \"playback\";\r\n\t\t\r\n\t\tlet repeat =  this.repeat;\r\n\r\n\t\t// Tone.Transport.scheduleRepeat(function(time){\r\n\t\t// \t//use the time argument to schedule a callback with Tone.Draw\r\n\t\t// \tTone.Draw.schedule(updateVis, time)\r\n\t\t// }, \"4n\", 0)\r\n\t\t\r\n\t\tTone.Transport.scheduleRepeat((time) => repeat(time), \"4n\", 0);\r\n\r\n\t\tthis.loopEndEvent = new Tone.Event(function(time, onLoopEndFunc) {\r\n\t\t\tconsole.log('loop has finished!',time)\r\n\t\t\tonLoopEndFunc();\r\n\t\t}, this.props.onLoopEnd);\r\n\r\n\t\tthis.loopEndEvent.loop = true;\r\n\t\t\r\n\t\t\r\n\r\n\t\t// TODO: dispatch ready event, so we can enable UI elements\r\n\t}\r\n\r\n\trepeat = (time) => {\r\n\t\tlet idx = this.currentBeat++ % this.beatsPerStep;\r\n\t\t\r\n\t\tlet note = this.score[idx];\r\n\t\tconsole.log('play note', note, time)\r\n\t\t// debugger\r\n\t\tthis.instrumentLib.getInstrument().triggerAttackRelease(note, \"4n\", time);\r\n\t\tlet updateVis = this.updateVis;\r\n\r\n\t\tTone.Draw.schedule(() => updateVis(idx), time)\r\n\t\t\r\n\r\n\t\t\r\n\t\t// init with ACCENT_2 note, it will be changed in setAccents\r\n\t\t// for (let i = 0; i < this.state.beatsPerStep; i++) {\r\n\t\t// \tscore.push([\"0:\" + i, this.accentNotes[accentTypes.ACCENT_2]]);\r\n\t\t// }\r\n\r\n\t}\r\n\r\n\tsetInstrument(instrumentKey) {\r\n\t\tthis.instrumentLib.setInstrument(instrumentKey);\r\n\t\t// this.restart();\r\n\t}\r\n\r\n\tonDebug() {\r\n\t\t// Tone.Transport.stop();\r\n\t\t// // Tone.Transport.clear();\r\n\t\t// if (!this.p) {\r\n\t\t// \tthis.p = new Tone.Event(function(time, note) {\r\n\t\t// \t\tconsole.log('play ', note,'at', time)\r\n\t\t// \t}, 'C3')\r\n\t\t\t\r\n\t\t// \t// this.p.loopEnd = \"1m\"\r\n\t\t// }\r\n\t\t// this.p.loop = false;\r\n\t\t// this.p.start(\"3m\");\r\n\r\n\r\n\t\t// this.loopEndEvent.start(this.loopEndEvent.barsAmount + \"m\")\r\n\t\t// Tone.Transport.start();\r\n\t\t// this.loopEndEvent.cancel();\r\n\t\t// this.loopEndEvent.start(\"1m\");\r\n\t\t\r\n\r\n\r\n\t\t// Tone.Transport.start()\r\n\t}\r\n\tsetBpm = bpm => {\r\n\t\tTone.Transport.bpm.value = bpm;\r\n\t};\r\n\r\n\tsetBeatsPerStep = newBps => {\r\n\t\tconsole.log(\"<SoundMachine>setBeatsPerStep\", newBps)\r\n\t\t\r\n\t \r\n\t\tthis.beatsPerStep = newBps;\r\n\t\t\r\n\t\t// remove if needed\r\n        while (this.score.length > newBps) {\r\n\t\t\tthis.score.pop();\r\n\t\t}\r\n\r\n\t\t// add if needed\r\n\t\twhile (this.score.length < newBps) {\r\n\t\t\tthis.score.push(accentTypes.ACCENT_1)\r\n\t\t}\r\n\t\t\r\n\t\tTone.Transport.timeSignature = [newBps, 4];\r\n\t\t// this will retrigger BarManager to refresh\r\n\t\tthis.setState({beatsPerStep: newBps})\r\n\t};\r\n\r\n\tupdateVis = (currentBeat) => {\r\n\t\tconsole.log('updateVis.currentBeat', currentBeat, Tone.Transport.progress)\r\n\t\t\r\n\r\n\t\tthis.refs.vis.setActive(currentBeat)\r\n\t}\r\n\r\n\tplayNote = (time, note) => {\r\n\t\tthis.instrumentLib.getInstrument().triggerAttackRelease(note, \"4n\", time);\r\n\t\t\r\n\t\t// Tone.Draw.schedule((time) => this.updateVis(time), time)\r\n\t}\r\n\t\r\n\trestart = () => {\r\n\t\treturn\r\n\t\t// check accents array so we know what to play\r\n\t\t// this.refreshAccentsArray()\r\n\r\n\t\tconsole.log(\"<SoundMachine>restart()\");\r\n\t\tconst sampler = this.instrumentLib.getInstrument();\r\n\t\t// console.log('sampler.key', sampler.key)\r\n\t\t\r\n\t\tif (this.part) {\r\n\t\t\tconsole.log(\"clearing this.part\");\r\n\t\t\tthis.part.stop()\t\r\n\t\t\tthis.part.removeAll()\r\n\t\t\tthis.part.dispose();\r\n\t\t\t// console.log(\"disposed this.part\", this.part);\r\n\t\t\tthis.part = undefined; // maybe it will help with garbage collection?\r\n\t\t}\r\n\r\n\t\t\r\n\t\tlet score = [];\r\n\t\t// init with ACCENT_2 note, it will be changed in setAccents\r\n\t\tfor (let i = 0; i < this.state.beatsPerStep; i++) {\r\n\t\t\tscore.push([\"0:\" + i, this.accentNotes[accentTypes.ACCENT_2]]);\r\n\t\t}\r\n\r\n\t\tthis.part = new Tone.Part((time, note) => this.playNote(time, note), score);\r\n\r\n\t\r\n\t\tthis.setAccents(this.accents);\r\n\t\tTone.Transport.timeSignature = [this.state.beatsPerStep, 4];\r\n\t\t// this.part.humanize = true; // this one is interesting\r\n\t\tthis.part.loopEnd = \"1m\"; // + this.state.beatsPerStep;\r\n\t\tthis.part.loop = true;\r\n\t\t\r\n\t\t// little trick to know when loop has finished, so we can proceed with plan if we're in BY_BAR playMode\r\n\t\tif (this.loopEndEvent.barsAmount ) {\r\n\t\t\tthis.loopEndEvent.cancel();\r\n\t\t\tconsole.log('this.loopEndEvent.start()', this.loopEndEvent.barsAmount + \"m\");\r\n\t\t\tthis.loopEndEvent.loopEnd = this.loopEndEvent.barsAmount + \"m\"; \r\n\t\t\tthis.loopEndEvent.loop = true;\r\n\t\t\tthis.loopEndEvent.start(  this.loopEndEvent.barsAmount + \"m\")\r\n \r\n\t\t}\r\n\t\t\r\n\t\t// if (this.state.isPlaying === true ) {\r\n\t\t\t// console.log('transpor was playing so play part')\r\n\r\n\r\n\r\n\t\r\n\t\tthis.part.start(0);\r\n\t\t\r\n\t\t// }\r\n\t};\r\n\r\n \r\n \r\n\tsetLoopEnd(bars) {\r\n\t\tconsole.log('<SM>setLoopEnd', bars)\r\n\t\tthis.loopEndEvent.cancel();\r\n\r\n\r\n\t\tthis.loopEndEvent.barsAmount = bars;\r\n\t\t\r\n\t\tthis.loopEndEvent.loopEnd = this.loopEndEvent.barsAmount + \"m\"; \r\n\t\tthis.loopEndEvent.loop = true;\r\n\t\tthis.loopEndEvent.start(  this.loopEndEvent.barsAmount + \"m\") \r\n\t}\r\n\tsetAccents(accentTypesArr) {\r\n\t\t// if (accentTypesArr.length != this.part.length) {\r\n\t\t//     throw new Error(\"accentTypes has incorrect number of elements \" + accentTypesArr.length + \" vs \" + this.part.length)\r\n\t\t// }\r\n\t\tthis.accents = accentTypesArr;\r\n\t\t\r\n\t\tfor (let i = 0; i < this.score.length; i++) {\r\n\t\t\t// by default 2 will be the tick note\r\n\t\t\tlet note = this.accentNotes[accentTypes.ACCENT_2];\r\n\r\n\t\t\t// if accent for this step is specified set it here\r\n\t\t\tif (\r\n\t\t\t\taccentTypesArr[i] !== undefined &&\r\n\t\t\t\taccentTypesArr[i] === accentTypes.ACCENT_1\r\n\t\t\t) {\r\n\t\t\t\tnote = this.accentNotes[accentTypes.ACCENT_1];\r\n\t\t\t} else if (\r\n\t\t\t\taccentTypesArr[i] !== undefined &&\r\n\t\t\t\taccentTypesArr[i] === accentTypes.ACCENT_3\r\n\t\t\t) {\r\n\t\t\t\tnote = this.accentNotes[accentTypes.ACCENT_3];\r\n\t\t\t}\r\n\t\t\tthis.score[i] = note;\r\n\t\t}\r\n\t}\r\n\r\n\tsetAccents_OBSOLETE(accentTypesArr) {\r\n\t\t// if (accentTypesArr.length != this.part.length) {\r\n\t\t//     throw new Error(\"accentTypes has incorrect number of elements \" + accentTypesArr.length + \" vs \" + this.part.length)\r\n\t\t// }\r\n\t\tthis.accents = accentTypesArr;\r\n\t\t\r\n\t\t\r\n\t\t// TODO: think about this\r\n\t\tif (!this.part) {\r\n\t\t\t// this.restart()\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.part.length; i++) {\r\n\t\t\t// by default 2 will be the tick note\r\n\t\t\tlet note = this.accentNotes[accentTypes.ACCENT_2];\r\n\r\n\t\t\t// if accent for this step is specified set it here\r\n\t\t\tif (\r\n\t\t\t\taccentTypesArr[i] !== undefined &&\r\n\t\t\t\taccentTypesArr[i] === accentTypes.ACCENT_1\r\n\t\t\t) {\r\n\t\t\t\tnote = this.accentNotes[accentTypes.ACCENT_1];\r\n\t\t\t} else if (\r\n\t\t\t\taccentTypesArr[i] !== undefined &&\r\n\t\t\t\taccentTypesArr[i] === accentTypes.ACCENT_3\r\n\t\t\t) {\r\n\t\t\t\tnote = this.accentNotes[accentTypes.ACCENT_3];\r\n\t\t\t}\r\n\t\t\tthis.part.at(\"0:\" + i, note);\r\n\t\t\t// this.part.at(\"0:\"+i, this.accents.indexOf(i) < 0 ? this.tickNote: this.accentNote);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div style={{width: '100%'}}>\r\n\t\t\t\t<div>Sound is {this.state.isPlaying === true ? \"playing\" : \"stopped\"}</div>\r\n\t\t\t\t<SimpleVis ref=\"vis\" beats={this.state.beatsPerStep}/>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// toggle() {\r\n\t//     if (Tone.Transport.state === \"started\") {\r\n\t//         this.stop();\r\n\t//     }\r\n\t//     else {\r\n\t//         this.start()\r\n\t//     }\r\n\t// }\r\n\r\n\tstop() {\r\n\t\tconsole.log(\"<SoundMachine>stop()\");\r\n\t\tthis.setState({ isPlaying: false });\r\n\t\tthis.currentBeat = 0;\r\n\r\n\t\tTone.Transport.stop();\r\n\t\t// Tone.Transport.stop();\r\n\t\t// if (this.part) {\r\n\t\t// \tthis.part.stop();\r\n\t\t// }\r\n\t}\r\n\r\n\tstart() {\r\n\t\tconsole.log(\"<SoundMachine>start()\");\r\n\r\n\t\t// Tone.Transport.start(\"+0.05\");\r\n\t\tthis.setState({ isPlaying: true });\r\n\t\t\r\n\t\tTone.Transport.start(\"+0.1\");\r\n\r\n\t\t// if (this.loopEndEvent.barsAmount ) {\r\n\t\t// \tdebugger\r\n\t\t// \tthis.loopEndEvent.cancel();\r\n\t\t// \tconsole.log('this.loopEndEvent.start()', this.loopEndEvent.barsAmount + \"m\");\r\n\t\t// \tthis.loopEndEvent.loopEnd = this.loopEndEvent.barsAmount + \"m\"; \r\n\t\t// \tthis.loopEndEvent.loop = true;\r\n\t\t// \tthis.loopEndEvent.start(  this.loopEndEvent.barsAmount + \"m\")\r\n\t\t// }\r\n\t\t\r\n\t\t// Tone.Transport.start(\"+0.1\");\r\n\t\t// this.restart();\r\n\t\t// if (this.part) {\r\n\t\t// \tthis.part.start();\r\n\t\t// }\r\n\t\t// if (this.part) {\r\n\t\t// \tthis.part.start(\"+0.1\");\r\n\t\t// }\r\n\t}\r\n\r\n\tgetBpm = () => {\r\n\t\treturn Tone.Transport.bpm.value;\r\n\t};\r\n}\r\n\r\nexport default SoundMachine;\r\n\r\n\r\nSoundMachine.defaultProps = {\r\n\tbeatsPerStep: 4,\r\n\tonLoopEnd: null\r\n };","export const playModes = {\r\n\tBY_BAR: \"by_bar\",\r\n\tBY_TIME: \"by_time\"\r\n};","import React, { Component } from 'react';\r\nimport {Container, Col} from 'reactstrap';\r\n\r\nclass SimpleProgress extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( <Container className=\"SimpleProgress\">\r\n            <div className=\"bar\" style={{width: this.props.value  + \"%\", display: 'block'}} />\r\n            {/* <div style={{backgroundColor: 'red', width: this.props.value  + \"%\" }}>{this.props.value.toFixed(0) }</div> */}\r\n            {/* <Col style={{backgroundColor: 'red'}} width=\"20px\">\r\n                progress {this.props.value}\r\n            </Col> */}\r\n        </Container> );\r\n    }\r\n}\r\n \r\nexport default SimpleProgress;","import React, { Component } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { playModes } from \"./PlayModes\";\r\nimport Tone  from \"tone\"\r\nimport SimpleProgress from \"./SimpleProgress\";\r\n\r\nclass Planner extends Component {\r\n\tstate = {\r\n\t\tbars: [],\r\n\t\tstepProgress: 0\r\n\t};\r\n\r\n\ttimer = {\r\n\t\tref: null,\r\n\t\tstartTime: null\r\n\t};\r\n\tstepsCounter = 0;\r\n\tstepProgressUpdateInterval = 50;\t// in ms\r\n\r\n\tmakePlan(s) {\r\n \r\n\t\tconst min = s.bpmRange[0];\r\n\t\tconst max = s.bpmRange[1];\r\n\r\n\t\tlet segments = [];\r\n\t\tlet bpm = min;\r\n\r\n\t\tif (s.playMode === playModes.BY_BAR) {\r\n\t\t\twhile (bpm <= max) {\r\n\t\t\t\tlet segment = {\r\n\t\t\t\t\tbpm: bpm,\r\n\t\t\t\t\tend: s.interval\r\n\t\t\t\t};\r\n\t\t\t\tsegments.push(segment);\r\n\t\t\t\tbpm += s.bpmStep;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tlet i = 0;\r\n\t\t\twhile (bpm <= max) {\r\n\t\t\t\tlet segment = {\r\n\t\t\t\t\ttime: i * s.interval,\r\n\t\t\t\t\tstart: i * s.interval,\r\n\t\t\t\t\tend: i * s.interval + s.interval,\r\n\t\t\t\t\tbpm: bpm\r\n\t\t\t\t}\r\n\t\t\t\tsegments.push(segment);\r\n\t\t\t\tbpm += s.bpmStep;\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t \r\n\t\t\t\r\n\t\t}\r\n\t\treturn segments;\r\n\t}\r\n \r\n\t// TODO: this is ugly\r\n\tsetPlan(uiStateObject) {\r\n\t\tconst plan = this.makePlan(uiStateObject);\r\n\r\n\t\tconsole.log(\"<Planner>setPlan\", plan);\r\n\t\tvar bars = [];\r\n \r\n\t\tlet totalPlanTime = 0;\r\n\t\tconst playMode = uiStateObject.playMode;\r\n\r\n\t\tif (uiStateObject.playMode === playModes.BY_BAR) {\r\n\t\t\tfor (var i = 0; i < plan.length; i++) {\r\n\t\t\t\tconst bar = {\r\n\t\t\t\t\tbpm: plan[i].bpm,\r\n\t\t\t\t\tend: plan[i].end,\r\n\t\t\t\t\tstep: this.stepsCounter++\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\ttotalPlanTime += 60 / plan[i].bpm  * uiStateObject.beatsPerStep * plan[i].end;\t\r\n\t\t\t\tbars.push(bar);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i = 0; i < plan.length; i++) {\r\n\t\t\t\tconst bar = {\r\n\t\t\t\t\ttime: plan[i].time,\r\n\t\t\t\t\ttimeEnd: plan[i].end,\r\n\t\t\t\t\tsegmentDuration: plan[i].end - plan[i].time,\r\n\t\t\t\t\tstartTimeFormatted: this.formatTime(plan[i].start),\r\n\t\t\t\t\tendTimeFormatted: this.formatTime(plan[i].end),\r\n\t\t\t\t\tbpm: plan[i].bpm,\r\n\t\t\t\t\tstep: this.stepsCounter++\r\n\t\t\t\t};\r\n\r\n\t\t\t\ttotalPlanTime += plan[i].end;\r\n\t\t\t\t\r\n\t\t\t\tbars.push(bar);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// update to new state\r\n\t\tthis.stepsCounter = 0;\r\n\r\n\t\tthis.setState(\r\n\t\t\tprevState => ({\r\n\t\t\t \ttotalPlanTime:  totalPlanTime,\r\n\t\t\t\tcurrentStep: 0,\r\n\t\t\t\tbars: bars,\r\n\t\t\t\tplayMode: playMode\r\n\t\t\t}),\r\n\t\t\t() => this.planChanged()\r\n\t\t);\r\n\t}\r\n\r\n\tstop() {\r\n\t\tconsole.log(\"lockBpm\", this.props.lockBpm);\r\n\t\tif (this.timer) {\r\n\t\t\t// clear timer\r\n\t\t\tclearInterval(this.timer.ref);\r\n\t\t\tthis.timer = undefined;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tif (this.stepProgressUpdateTimer) {\r\n\t\t\tconsole.log('clearing stepProgressUpdateTimer')\r\n\t\t\tclearInterval(this.stepProgressUpdateTimer);\r\n\t\t\tthis.stepProgressUpdateTimer = undefined\r\n\t\t}\r\n\t\tthis.resetStep();\r\n\t}\r\n\r\n\t\r\n\tonInterval() {\r\n\t\tconsole.log(\"<Planner>onInterval\");\r\n\t\tif (this.props.lockBpm) {\r\n\t\t\tconsole.log(\"<Planner>isLocked == true so don't advance anything\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar currentStep = this.state.currentStep;\r\n\r\n\t\t// check if we're not at the end of plan\r\n\t\tif (currentStep + 1 >= this.state.bars.length) {\r\n\t\t\tconsole.log(\"no more steps, please stop()\");\r\n\t\t\tif (this.timer) {\r\n\t\t\t\tclearInterval(this.timer.ref);\r\n\t\t\t\tthis.time = undefined;\r\n\t\t\t}\r\n\t\t\tthis.props.onAdvance(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// console.log(\"<Planner>onInterval\", this.state.currentStep + 1);\r\n\t\tconsole.log('<Planner>advancing step to' , currentStep + 1)\r\n\t\tthis.setState({ currentStep: currentStep + 1 });\r\n\t\t// console.log('returning' , this.state.currentStep)\r\n\t\tthis.props.onAdvance(this.state.bars[this.state.currentStep]);\r\n\t}\r\n\r\n\tstart() {\r\n\t\tconsole.log(\"<Planner>start()\");\r\n\t\t// debugger\r\n\t\t// make sure we dispose any timer that's currently set\r\n\t\tif (this.timer) {\r\n\t\t\t// console.log(\"<Planner>startTimer() old timer disposed\");\r\n\t\t\tclearInterval(this.timer.ref);\r\n\t\t\tthis.timer.ref = undefined;\r\n\t\t\tthis.timer.startTime = null;\r\n\t\t\tthis.resetStep();\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// if we step forward after time interval, then set the timer func here\r\n\t\tif (this.state.playMode === playModes.BY_TIME) {\r\n\t\t\t// we're in playMode === BY_TIME mode\r\n\t\t\t// calc segment length between steps and set timer for such\r\n\t\t\tconst time =\r\n\t\t\t\t1000 *\r\n\t\t\t\t(this.state.bars[this.state.currentStep].timeEnd -\r\n\t\t\t\t\tthis.state.bars[this.state.currentStep].time);\r\n\t\t\tvar onInterval = this.onInterval.bind(this);\r\n\t\t\tconsole.log(\"setting interval\", time);\r\n\r\n\t\t\tthis.timer = {\r\n\t\t\t\tref: setInterval(onInterval, time),\r\n\t\t\t\tstartTime: new Date() \r\n\t\t\t};\r\n\t\t\t\t\r\n\t\t} \r\n\t\t\t\r\n\t\tif (!this.stepProgressUpdateTimer) {\r\n\t\t\tthis.stepProgressUpdateTimer = setInterval(() => this.updateStepProgress(), this.stepProgressUpdateInterval);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tsetProgressEvent(event) {\r\n\t\t// if (this.state.playMode === playModes.BY_BAR) {\r\n\t\t\tthis.event = event;\r\n\t\t// }\r\n\t}\r\n\r\n\tupdateStepProgress() {\r\n\t\tif (this.props.lockBpm) {\r\n \t\t\treturn\r\n\t\t}\r\n \r\n\t\tconst bar = this.getCurrentBar();\r\n\t\tlet progress = 0;\r\n\r\n\t\tif (this.state.playMode === playModes.BY_BAR) {\r\n\t\t\tprogress = \tthis.event.progress\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tlet now = Date.now() - this.timer.startTime.getTime();\r\n\t\t\t// console.log('lockstart',this.timer.lockStart);\r\n\t\t\t// console.log(' this.timer.startTime.getTime()', this.timer.startTime.getTime())\r\n\t\t\tconst elapsedTime = now - ( bar.segmentDuration * bar.step ) * 1000;\r\n\t\t\tprogress = \t(elapsedTime / bar.segmentDuration) / 1000\r\n\t\t\t// console.log('progress %f, elapsed %d', progress,elapsedTime)\r\n\t\r\n\t\t}\r\n\t\t// cheat\r\n\t\tif (progress > 1) {\r\n\t\t\tprogress = 1;\r\n\t\t}\r\n\t\t\r\n\t\tthis.setState({stepProgress:  progress})\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.stepsCounter = 0;\r\n\t\tthis.setState({ bars: [], currentStep: 0 });\r\n\t\tthis.planChanged();\r\n\t}\r\n\r\n\tplanChanged = () => {\r\n\t\tconsole.log(\"<Planner>planChanged\");\r\n\t\tif (this.props.onChange) {\r\n\t\t\t// console.log(\"<Planner>fire onChange\");\r\n\t\t\tthis.props.onChange();\r\n\t\t}\r\n\t};\r\n\r\n\tresetStep() {\r\n\t\tthis.setState({ currentStep: 0 });\r\n\t\tthis.props.onAdvance(this.state.bars[0]);\r\n\t}\r\n\r\n\tgetCurrentBar() {\r\n\t\tif (this.state.currentStep >= this.state.bars.length) {\r\n\t\t\tthrow new Error(\"Trying to get step that doesn't exists\");\r\n\t\t}\r\n\t\treturn this.state.bars[this.state.currentStep];\r\n\t}\r\n\r\n\tonStepClick(idx) {\r\n\t\tthis.setState({ currentStep: idx }, () =>\r\n\t\t\tthis.props.onAdvance(this.state.bars[this.state.currentStep])\r\n\t\t);\r\n\t}\r\n\r\n\tbarRender = b => {\r\n\t\tconst cls = this.state.currentStep === b.step ? \"current-step\" : \"\";\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tonClick={() => this.onStepClick(b.step)}\r\n\t\t\t\tclassName={\"step \" + cls}\r\n\t\t\t\tkey={\"key_\" + b.bpm}\r\n\t\t\t>\r\n\t\t\t\t{b.segmentDuration !== undefined\r\n\t\t\t\t\t? this.formatTime(b.segmentDuration.toFixed(0))\r\n\t\t\t\t\t: b.end + \" bars \"}{\" \"}\r\n\t\t\t\tat {b.bpm.toFixed(0)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\t// console.log(\"<Planner> render\");\r\n\t\t// don't doo much if no plan yet\r\n\t\tif (this.state.bars.length === 0) {\r\n\t\t\treturn <div>No plan</div>;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<Container className=\"Planner\">\r\n\t\t\t\t{/* <div>Next step in {this.state.stepProgress.toFixed(1)} seconds</div> */}\r\n\t\t\t\t<SimpleProgress value={this.state.stepProgress  * 100}/>\r\n\t\t\t\t<div style={this.props.lockBpm ? { opacity: 0.5 } : {}}>\r\n\t\t\t\t\t{this.state.bars.map(bar => this.barRender(bar))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>Total time: {this.formatTime(this.state.totalPlanTime)}</div>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n\r\n\tpadTime(t) {\r\n\t\treturn t < 10 ? \"0\" + t : t;\r\n\t}\r\n\r\n\tformatTime(timeInSeconds) {\r\n\t\t//{this.leadingZeroCheck(now.getMinutes())}:{now.getSeconds()} --\r\n\t\tlet t = new Date(0, 0, 0, 0, 0, 0, 0);\r\n\t\tt.setSeconds(timeInSeconds);\r\n\t\tlet m = t.getMinutes();\r\n\t\tlet o = \"\";\r\n\t\tif (m !== 0) {\r\n\t\t\to += t.getMinutes(); //this.padTime(t.getMinutes());\r\n\t\t\to += \":\";\r\n\t\t}\r\n\t\to += \"\" + this.padTime(t.getSeconds()) + \"s\";\r\n\t\treturn o;\r\n\t}\r\n}\r\n\r\nexport default Planner;\r\n\r\nPlanner.defaultProps = {\r\n\tplayMode: playModes.BY_BAR,\r\n\tcurrentStep: 0\r\n}\t","import React from 'react'\r\nimport Slider from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n// import {Container, Row, Col} from 'reactstrap'\r\n\r\nclass AdvancedSlider extends Slider {\r\n \r\n    // constructor(props) {\r\n    //     super(props)\r\n    //     // if (props.renderVal) {\r\n    //     //     this.renderVal = props.renderVal\r\n    //     // }\r\n    \r\n    // }\r\n    render() { \r\n        return (\r\n            <div>\r\n                {super.render()}\r\n                <div><Badge  onClick={this.onBadgeClick} className=\"d-i\">{this.state.value}</Badge></div>\r\n            </div>\r\n            );\r\n    }\r\n\r\n    onBadgeClick() {\r\n        // attach editorInPlace\r\n    }\r\n \r\n}\r\n\r\nexport default AdvancedSlider\r\n","import React from 'react'\r\nimport { Range } from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n\r\nclass AdvancedRange extends Range {\r\n    render() { \r\n        return (<div>\r\n            {super.render()}\r\n            <Badge onClick={this.onBadgeClick} className=\"d-i\">{this.state.bounds[0]} - {this.state.bounds[1]}</Badge>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default AdvancedRange;\r\n","import React, { Component } from \"react\";\r\nimport { Button, ButtonGroup } from \"reactstrap\";\r\nimport { accentTypes } from \"./AccentTypes\";\r\n\r\n\r\nclass BarManager extends Component {\r\n\tstate = {\r\n\t\tbars: []\r\n\t};\r\n\r\n\taccents = [accentTypes.ACCENT_1,accentTypes.ACCENT_2,accentTypes.ACCENT_3];\r\n\tconstructor(props) {\r\n\t\tsuper(props);\t\t\r\n\t\tthis.state.bars = this.prepareBars(props.defaultValue);\r\n\t\t\r\n\t\t// by def set accent on first beat\r\n\t\tthis.state.bars[0] = accentTypes.ACCENT_1;\r\n\t}\r\n\r\n\tprepareBars(amount) {\r\n\t\t\r\n\t\tlet oldVal = this.getValue();\r\n\r\n\t\tlet  bars = [];\r\n\t\tfor (let i = 0; i < amount; i++) {\r\n\t\t\tbars.push(oldVal[i]  !== undefined ? oldVal[i] : accentTypes.ACCENT_2);\r\n\t\t}\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tsetBarsAmount(amount) {\r\n\t\tlet bars = this.prepareBars(amount);\r\n\t\t// set state and send onAfterChange once updated as they have changed surely (at least the amount)\r\n\t\tthis.setState({ bars: [...bars] },  this.props.onAfterChange);\r\n\t}\r\n\r\n\tsetAccents(accentsArray) {\r\n\t\tthis.setState({bars: accentsArray});\r\n\t}\r\n\r\n\thandleCellClick(selected) {\r\n\t\t// old type\r\n\t\tconst type = this.state.bars[selected]\r\n\t\t\r\n\t\t// new type\r\n\t\tlet newType = this.accents[(type + 1 ) % 3];\r\n\t\t\r\n\t\tthis.state.bars[selected] = newType;\r\n\t\tthis.forceUpdate();\r\n\r\n\t\t/// hmm good patern to update arrays in state, doesn't want to lose it \r\n\t\t// const index = this.state.accentBars.indexOf(selected);\r\n\t\t// if (index < 0) {\r\n\t\t// \tthis.state.accentBars.push(selected);\r\n\t\t// } else {\r\n\t\t// \tthis.state.accentBars.splice(index, 1);\r\n\t\t// }\r\n\t\t// this.setState({ accentBars: [...this.state.accentBars] });\r\n\t}\r\n\r\n\tgetValue() {\r\n\t\treturn this.state.bars;\r\n\t\t// var bars = []\r\n\t\t// for (let i = 0 ; i < this.state.bars.length ; i ++) {\r\n\t\t// \tbars.push(this.state.bars[i])\r\n\t\t// }\r\n\t\t// return bars;\r\n\t}\r\n\r\n\tgetBtnColor(type) {\r\n\t\tvar color;\r\n\t\tswitch (type) {\r\n\t\t\tcase accentTypes.ACCENT_2:\r\n\t\t\t\tcolor = \"secondary\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase accentTypes.ACCENT_3:\r\n\t\t\t\tcolor = \"warning\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tcolor = \"primary\"\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\trenderCells = bars => {\r\n\t\treturn bars.map((bar,idx) => (\r\n\t\t\t<Button\r\n\t\t\t\tsize=\"sm\"\r\n\t\t\t\t color={this.getBtnColor(bar)}\r\n\t\t\t\t// className=\"btn-state-1\"\r\n\t\t\t\tkey={\"barkey_\" + idx}\r\n\t\t\t\tonClick={() => this.handleCellClick(idx)}\r\n\t\t\t\t// active={!this.state.accentBars.includes(bar)}\r\n\t\t\t>\r\n\t\t\t\t{idx + 1}\r\n\t\t\t</Button>\r\n\t\t));\r\n\t};\r\n\r\n\trender() {\r\n\t\t// I'm starting to realize how this works finally\r\n\t\tconst { onAfterChange } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<ButtonGroup onClick={onAfterChange}>\r\n\t\t\t\t{this.renderCells(this.state.bars)}\r\n\t\t\t</ButtonGroup>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BarManager;\r\n","import {playModes} from \"./PlayModes\"\r\nimport InstrumentLib, { instruments } from \"./InstrumentLib\";\r\n\r\nexport const PresetsLib = [\r\n    {\r\n        title: \"4 beats every 4 bars\",\r\n        beatsPerStep: 4,\r\n        playMode: playModes.BY_BAR,\r\n        interval: 4,\r\n        bpmStep: 20,\r\n        bpmRange: [100, 400],\r\n        accents: [0, 1, 2, 1]\r\n    },\r\n    {\r\n\t\ttitle: \"5 beats, every 1min\",\r\n\t\tbeatsPerStep: 5,\r\n\t\tbpmRange: [200, 400],\r\n        accents: [0, 1, 0, 0,2],\r\n        playMode: playModes.BY_TIME,\r\n        interval: 60,\r\n        bpmStep: 10\r\n    },\r\n    {\r\n        title: \"Jhaptal\",\r\n        instrument: instruments.TABLA,\r\n\t\tbeatsPerStep: 10,\r\n\t\tbpmRange: [200, 400],\r\n        accents: [0, 1, 0, 0, 1, 2, 1, 0, 0, 1 ],\r\n        playMode: playModes.BY_TIME,\r\n        interval: 5*60,\r\n        bpmStep: 10\r\n    }\r\n];","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { PresetsLib } from \"./PresetsLib\";\r\n\r\nclass PresetsManager extends Component {\r\n\tstate = {};\r\n\r\n\r\n\tpresets = PresetsLib;\r\n\r\n\tonPresetClick(preset) {\r\n\t\t// make sure we set this in props\r\n\t\tthis.props.onSelect(preset);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container className=\"PresetsManager\">\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{this.presets.map((item, idx) => (\r\n\t\t\t\t\t\t<Col className=\"preset\"\r\n\t\t\t\t\t\t\tonClick={() => this.onPresetClick(item)}\r\n\t\t\t\t\t\t\tkey={\"preset_\" + idx}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{item.title}\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PresetsManager;\r\n","import React, { Component } from 'react';\r\nimport {Container, Row, Col} from 'reactstrap'\r\n\r\nclass SimplePanel extends Component {\r\n    render() { \r\n        return ( <Container className={\"pane \" + this.props.className}> \r\n            <Row className=\"pane-title\">{this.props.title}</Row>\r\n            <Row><Col className=\"pane-body\">{this.props.children}</Col></Row>\r\n        </Container> );\r\n    }\r\n}\r\n \r\nexport default SimplePanel;\r\n\r\n\r\nSimplePanel.defaultProps = {\r\n    title: 'title',\r\n    children: [],\r\n    className: ''\r\n };","import React, { Component } from \"react\";\r\nimport SimplePanel from \"./SimplePanel\";\r\nimport { ButtonGroup, Button, Collapse, Input, ButtonDropdown, DropdownToggle, DropdownItem, DropdownMenu, InputGroup} from \"reactstrap\";\r\nimport { playModes } from \"./PlayModes\"\r\n\r\n\r\nclass ModePanel extends Component {\r\n\tstate = {\r\n\t\tplayMode: playModes.BY_TIME,\r\n\t\tbpmStep: 10,\r\n        bpmStepDropdownOpen: false,\r\n        byTimeInterval: 5,\r\n        byBarInterval: 2\r\n    };\r\n\r\n\tonModeChange(newMode) {\r\n        this.setState({ playMode: newMode }, this.props.onAfterChange);\r\n\t}\r\n\r\n\tonBpmStepChange() {\r\n\t\tthis.setState(prevState => ({\r\n\t\t\tbpmStepDropdownOpen: !prevState.bpmStepDropdownOpen\r\n        }),);\r\n\t}\r\n\r\n\tonBpmStepSelect(value) {\r\n\t\tthis.setState({ bpmStep: value }, this.props.onAfterChange);\r\n\t}\r\n\r\n    getValue() {\r\n        let o = {\r\n            playMode: this.state.playMode,\r\n            interval: this.state.playMode === playModes.BY_BAR ? this.state.byBarInterval : this.state.byTimeInterval,\r\n            bpmStep: this.state.bpmStep\r\n\t\t}\r\n\t\treturn o;\r\n\t}\r\n\t\r\n\tsetValue(o) {\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tplayMode: o.playMode,\r\n\t\t\tbpmStep: o.bpmStep,\r\n\t\t\tbyBarInterval: o.playMode === playModes.BY_BAR ? o.interval : this.state.byBarInterval,\r\n\t\t\tbyTimeInterval: o.playMode === playModes.BY_TIME ? o.interval : this.state.byTimeInterval\r\n\r\n\t\t}, this.props.onAfterChange);\r\n\r\n\t}\r\n\r\n    onInputChange(e) {\r\n        let state = {};\r\n        state[e.target.name] = Number(e.target.value);\r\n        this.setState(state, this.props.onAfterChange);\r\n    }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<SimplePanel title=\"Mode\" className=\"ModePanel\">\r\n\t\t\t\t<ButtonGroup>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tonClick={() => this.onModeChange(playModes.BY_BAR)}\r\n\t\t\t\t\t\tactive={this.state.playMode === playModes.BY_BAR}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tBy bar\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tonClick={() => this.onModeChange(playModes.BY_TIME)}\r\n\t\t\t\t\t\tactive={this.state.playMode === playModes.BY_TIME}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tBy time\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</ButtonGroup>\r\n\t\t\t\t<Collapse isOpen={this.state.playMode === playModes.BY_BAR}>\r\n\t\t\t\t\t<div>Increase speed every\r\n                   <Input size=\"sm\" name=\"byBarInterval\" onChange={(e) => this.onInputChange(e)}  value={this.state.byBarInterval} type=\"number\" step=\"1\" />\r\n                   bars</div>\r\n\t\t\t\t</Collapse>\r\n\t\t\t\t<Collapse isOpen={this.state.playMode === playModes.BY_TIME}>\r\n\t\t\t\t\t<div>Increase speed every\r\n                    <Input bsSize=\"sm\" name=\"byTimeInterval\" onChange={(e) => this.onInputChange(e)} value={this.state.byTimeInterval} min={1} max={600} type=\"number\" step=\"1\" />\r\n                    seconds</div>\r\n\t\t\t\t</Collapse>\r\n                increase speed by\r\n                <ButtonDropdown bsSize=\"sm\" style={{margin: '0px 5px'}}\r\n\t\t\t\t\t\tisOpen={this.state.bpmStepDropdownOpen}\r\n\t\t\t\t\t\ttoggle={() => this.onBpmStepChange()}>\r\n\t\t\t\t\t\t<DropdownToggle caret size=\"sm\">\r\n\t\t\t\t\t\t\t{this.state.bpmStep}\r\n\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t<DropdownItem onClick={() => {this.onBpmStepSelect(5)}}>\r\n\t\t\t\t\t\t\t\t5\r\n\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t<DropdownItem onClick={() => {this.onBpmStepSelect(10)}}>\r\n\t\t\t\t\t\t\t\t10\r\n\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t<DropdownItem onClick={() => {this.onBpmStepSelect(20)}}>\r\n\t\t\t\t\t\t\t\t20\r\n\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t<DropdownItem onClick={() => {this.onBpmStepSelect(30)}}>\r\n                             \t30\r\n\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t<DropdownItem onClick={() => {this.onBpmStepSelect(50)}}>\r\n\t\t\t\t\t\t\t\t50\r\n\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t</ButtonDropdown>\r\n\t\t\t\t\tbpm\r\n\t\t\t</SimplePanel>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ModePanel;\r\n\r\nModePanel.defaultProps = {\r\n\tonAfterChange: null\r\n };","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./components/SoundMachine\";\nimport SoundMachine from \"./components/SoundMachine\";\nimport Planner from \"./components/Planner\";\nimport \"rc-slider/assets/index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nimport {\n\tButtonDropdown,\n\tDropdownToggle,\n\tDropdownMenu,\n\tDropdownItem\n} from \"reactstrap\";\nimport AdvancedSlider from \"./components/AdvancedSlider\";\nimport AdvancedRange from \"./components/AdvancedRange\";\nimport BarManager from \"./components/BarManager\";\nimport { instruments } from \"./components/InstrumentLib\";\nimport PresetsManager from \"./components/PresetsManager\";\nimport ModePanel from \"./components/ModePanel\";\nimport { playModes } from \"./components/PlayModes\";\n\nclass App extends Component {\n\ttimer = {\n\t\ttimerRef: null,\n\t\tstartTime: null\n\t};\n\n\tstate = {\n\t\tbpmRange: [200, 400],\n\t\t// exerciseDuration: 1 * 60, // 1 minute\n\t\t//segmentDuration: 5, // 5 seconds\n\t\t// totalSteps: 10, // 10 steps\n\t\tbeatsPerStep: 4,\n\t\tcurrentBpm: 60,\n\t\tinstrument: instruments.ELECTRO_KIT,\n\t\t// playMode: playModes.BY_TIME,\n\t\tinstrumentDropdownOpen: false,\n\t\tcycleDropdownOpen: false,\n\t\tlockBpm: false\n\t};\n\n\tcomponentDidMount() {\n\t\t// initialize with UI settings\n\t\tthis.refs.planner.setPlan(this.getUiState());\n\n\n\t\t// pass the event so we know how to display progress when in BY_BAR mode\n\t\tthis.refs.planner.setProgressEvent(this.refs.sm.loopEndEvent)\n\n\n\t\t// TODO for layout debug\n\t\t//this.settingsChanged();\n\t}\n\tonInstrumentSelect(newInstrument) {\n\t\tthis.refs.sm.setInstrument(newInstrument);\n\n\t\t// let instrument = this.refs.sm.getInstrument();\n\n\t\tthis.setState({ instrument: newInstrument });\n\t}\n\n\trenderCyclePane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">CYCLE</Row>\n\t\t\t\t{/* <Row>\n\t\t\t\t\t<Col xs={3}>Total time (min)</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedSlider\n\t\t\t\t\t\t\tref=\"exerciseDuration\"\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tmax={30}\n\t\t\t\t\t\t\tdefaultValue={1}\n\t\t\t\t\t\t\t// defaultValue={this.state.exerciseDuration / 60}\n\t\t\t\t\t\t\tonAfterChange={() => this.exerciseDurationChanged()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row> */}\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={3}>Beats per step</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedSlider\n\t\t\t\t\t\t\tref=\"beatsPerStep\"\n\t\t\t\t\t\t\tmin={2}\n\t\t\t\t\t\t\tmax={16}\n\t\t\t\t\t\t\tdefaultValue={this.state.beatsPerStep}\n\t\t\t\t\t\t\tonAfterChange={() => this.onBeatsPerStepChange()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t{/* <Row>\n\t\t\t\t\t<Col xs={3}>Number of steps</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedSlider\n\t\t\t\t\t\t\tref=\"totalSteps\"\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tmax={60}\n\t\t\t\t\t\t\tdefaultValue={this.state.totalSteps}\n\t\t\t\t\t\t\tonAfterChange={() => this.totalStepsChanged()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row> */}\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={3}>Accents</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<BarManager\n\t\t\t\t\t\t\tonAfterChange={() => this.onAccentsChange()}\n\t\t\t\t\t\t\tref=\"barManager\"\n\t\t\t\t\t\t\tdefaultValue={this.state.beatsPerStep}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderTempoPane() {\n\t\t// debugger\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">RANGE</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs=\"3\">BPM</Col>\n\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedRange\n\t\t\t\t\t\t\tref=\"bpmRange\"\n\t\t\t\t\t\t\tmin={30}\n\t\t\t\t\t\t\tmax={600}\n\t\t\t\t\t\t\tdefaultValue={[\n\t\t\t\t\t\t\t\tthis.state.bpmRange[0],\n\t\t\t\t\t\t\t\tthis.state.bpmRange[1]\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tpushable={true}\n\t\t\t\t\t\t\tonAfterChange={() => this.onBpmRangeChange()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderPlaybackPane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">PLAYBACK</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs=\"3\">Instrument</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<ButtonDropdown\n\t\t\t\t\t\t\tisOpen={this.state.instrumentDropdownOpen}\n\t\t\t\t\t\t\ttoggle={() => this.onInstrumentChange()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DropdownToggle caret>\n\t\t\t\t\t\t\t\t{this.state.instrument}\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t<DropdownMenu>\n\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.onInstrumentSelect(\n\t\t\t\t\t\t\t\t\t\t\tinstruments.TABLA\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tTabla\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.onInstrumentSelect(\n\t\t\t\t\t\t\t\t\t\t\tinstruments.ELECTRO_KIT\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tElectro\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t</ButtonDropdown>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t{/* <Row>\n\t\t\t\t\t<Col xs=\"3\">Playback</Col>\n\t\t\t\t\t<Col>One Time/LoopBack/Repeat</Col>\n\t\t\t\t</Row> */}\n\t\t\t</Container>\n\t\t);\n\t}\n\n\tonModePanelChanged() {\n\t\tconst state = this.getUiState();\n\t\tconsole.log(\"<App>onModePanelChanged\", state);\n\t\tthis.refs.planner.setPlan(state);\n\t\tif (state.playMode === playModes.BY_BAR) {\n\t\t\tthis.refs.sm.setLoopEnd(state.bars)\n\t\t}\n\n\t\t\n\t\t// debugger\n\t}\n\trenderMidPane() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderExamplesPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderVisPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\trenderLeftPane() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderTempoPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col><ModePanel\n\t\t\t\t\t\t\t\tref=\"modePanel\"\n\t\t\t\t\t\t\t\tonAfterChange={() => this.onModePanelChanged()}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Col></Row>\n\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderPlaybackPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderCyclePane()}</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderExamplesPane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">Presets</Row>\n\t\t\t\t<PresetsManager\n\t\t\t\t\tonSelect={preset => this.onPresetSelect(preset)}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderVisPane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">Visualisation</Row>\n\t\t\t\t<Row><SoundMachine\n\t\t\t\t\tref=\"sm\"\n\t\t\t\t\tbeatsPerStep={this.state.beatsPerStep}\n\t\t\t\t\tonLoopEnd={() => this.onLoopEnd()}\n\t\t\t\t\t// onLoopEnd={ this.state.playMode === playModes.BY_BAR ?  () => this.onLoopEnd() : function(){}}\n\t\t\t\t\tinstrument={this.state.instrument}\n\t\t\t\t/></Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\tonPresetSelect(preset) {\n\t\tconsole.log(\"setting preset\", preset);\n\t\t\n\t\t// this.setState({exerciseDuration: preset.exerciseDuration})\n\n\t\tthis.refs.bpmRange.setState({\n\t\t\tbounds: [preset.bpmRange[0], preset.bpmRange[1]]\n\t\t});\n\t\tthis.refs.beatsPerStep.setState({ value: preset.beatsPerStep });\n\t\tthis.refs.barManager.setBarsAmount(preset.beatsPerStep);\n\t\tthis.refs.sm.setBeatsPerStep(preset.beatsPerStep);\n\t\t// this.refs.totalSteps.setState({ value: preset.totalSteps });\n\n\t\tthis.refs.barManager.setAccents(preset.accents);\n\n\t\t// set mode\n\t\tthis.refs.modePanel.setValue(preset);\n\n\n\n\n\t\t// this.refs.exerciseDuration.setState(\n\t\t// \t{ value: preset.exerciseDuration },\n\t\t// \tthis.exerciseDurationChanged\n\t\t// );\n\n\t\t// this will trigger restart\n\t\t// this.exerciseDurationChanged()\n\t\t//this.refs.exerciseDuration.setState({value: 20})\n\t\t//this.exerciseDuration.setValue(preset.exerciseDuration)\n\t}\n\trenderPlanPane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">Plan</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Planner\n\t\t\t\t\t\t\n\t\t\t\t\t\tlockBpm={this.state.lockBpm}\n\t\t\t\t\t\t//plan={(this.state)}\n\t\t\t\t\t\tonChange={() => this.onPlanChanged()}\n\t\t\t\t\t\tonAdvance={currentStep =>\n\t\t\t\t\t\t\tthis.onPlanAdvanced(currentStep)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tref=\"planner\"\n\t\t\t\t\t/>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderRightPane() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Container className=\"pane\">\n\t\t\t\t\t\t\t<Row className=\"pane-title\">BPM</Row>\n\t\t\t\t\t\t\t<Row className={this.state.lockBpm ? \"locked\" : \"\"}>\n\t\t\t\t\t\t\t\t<Col> {this.state.currentBpm.toFixed(0)}</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderPlanPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\tonLoopEnd() {\n\t\tconst s = this.getUiState();\n\t\tif (s.playMode === playModes.BY_BAR) {\n\t\t\tconsole.log('onLoopEnd fetched')\n\t\t\tthis.refs.planner.onInterval()\n\t\t}\n\n\t\t// this.refs.sm.resetLoopEnd()\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t// debugger\n\t\t// if (this.state.constantMode) \n\t\t\n\t\t// this.refs.sm.start();\n\t\t// debugger\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Container className=\"app-container\">\n\t\t\t\t\t{/* outer table */}\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t{/* left pane with controls */}\n\t\t\t\t\t\t\t{this.renderLeftPane()}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col>{this.renderMidPane()}</Col>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t{/* right pane with examples and plan*/}\n\t\t\t\t\t\t\t{this.renderRightPane()}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => this.handleStartStop()}\n\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tStart / Stop\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Button onClick={() => this.onLockBpmBtn()}>\n\t\t\t\t\t\t\t\tLock BPM\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t{/* <Button onClick={() => this.onDebug()}>\n\t\t\t\t\t\t\t\tDebug\n\t\t\t\t\t\t\t</Button> */}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tonDebug() {\n\t\tthis.refs.sm.onDebug()\n\t}\n\n\tonLockBpmBtn() {\n\t\tthis.setState({ lockBpm: !this.state.lockBpm });\n\t}\n\n\t// totalStepsChanged = () => {\n\t// \tconst s = this.getUiState();\n\t// \tif (s.totalSteps !== this.state.totalSteps) {\n\t// \t\tthis.refs.planner.setPlan(s);\n\t// \t}\n\t// };\n\n\tonBeatsPerStepChange = () => {\n\t\t// plan doesn't change here, just the beats per step amount\n\t\tconst s = this.getUiState();\n\t\t// update barManager with newMeasureSetting\n\t\tif (s.beatsPerStep !== this.refs.sm.beatsPerStep) {\n\t\t\tthis.refs.barManager.setBarsAmount(s.beatsPerStep);\n\t\t\tthis.refs.sm.setBeatsPerStep(s.beatsPerStep);\n\t\t}\n\t};\n\n\tonBpmRangeChange() {\n\t\tconst s = this.getUiState();\n\t\tif (\n\t\t\ts.bpmRange[0] !== this.state.bpmRange[0] ||\n\t\t\ts.bpmRange[1] !== this.state.bpmRange[1]\n\t\t) {\n\t\t\t// console.log(\"bpm range changed\");\n\n\t\t\t// console.log(s, this.state);\n\t\t\tthis.setState({ bpmRange: s.bpmRange });\n\n\t\t\tthis.refs.planner.setPlan(s);\n\t\t}\n\t}\n\n\t// exerciseDurationChanged = () => {\n\t// \t// make and execute new plan\n\t// \tthis.refs.planner.setPlan(this.getUiState());\n\t// };\n\n\tonPlanAdvanced = newStep => {\n\t\tif (newStep) {\n\t\t\tconsole.log(\"<App>onPlanAdvanced() new step:\", newStep);\t\t\t\n\t\t\tthis.setBpm(newStep.bpm);\n\n\t\t} else {\n\t\t\t// no step so just stop planner and transport\n\t\t\tthis.refs.planner.stop();\n\t\t\tthis.refs.sm.stop();\n\t\t}\n\t};\n\n\tsetBpm = newBpm => {\n\t\tthis.setState({ currentBpm: newBpm });\n\t\tthis.refs.sm.setBpm(newBpm);\n\t};\n\n\tonPlanChanged = () => {\n\t\tconsole.log(\"<App>onPlanChanged\");\n\n\t\t// this.refs.planner.start();\n\t\tlet bar = this.refs.planner.getCurrentBar();\n\t\tconsole.log(\"<App>currentBar\", bar)\n\t\t// console.log(\"<App>isPlaying?\", this.refs.sm.state.isPlaying )\n\n\t\t\n\t\t\n\t\tthis.refs.sm.setLoopEnd(bar.end || false);\n\t\t\n\t\t// set initial speed\n\t\tif (bar) {\n\t\t\tthis.setBpm(bar.bpm);\n\t\t}\n\t\t// this.refs.sm.restart();\n\n\t\tif (this.refs.sm.state.isPlaying) {\n\t\t\tthis.refs.planner.start();\n\t\t}\n\t\t// debugger\n\t\t\n\t\t\n\t};\n\n\tonInstrumentChange() {\n\t\tthis.setState(prevState => ({\n\t\t\tinstrumentDropdownOpen: !prevState.instrumentDropdownOpen\n\t\t}));\n\t}\n\n\t// onCycleLockChange() {\n\t//   this.setState(prevState => ({\n\t// \t\tcycleDropdownOpen: !prevState.cycleDropdownOpen\n\t// \t}));\n\t// }\n\n\thandleStartStop = () => {\n\t\t// if stop then stop\n\t\tconsole.log(\n\t\t\t// \"<App>handleStartStop, isPlaying=\",\n\t\t\tthis.refs.sm.state.isPlaying\n\t\t);\n\t\t// console.log(\"UIState\", this.getUiState());\n\t\tif (this.refs.sm.state.isPlaying === true) {\n\t\t\tthis.refs.planner.stop();\n\t\t\tthis.refs.sm.stop();\n\t\t} else {\n\t\t\tthis.refs.planner.start();\n\t\t\tthis.refs.sm.start();\n\t\t}\n\t\t// if (this.state.playMode === playModes.BY_BAR) {\n\t\t// \t// attach end of pattern listener\n\t\t// \tdebugger\n\t\t// }\n\t};\n\n\tgetUiState() {\n\t\t// obsolete, we're going to use new UI from ModePanel\n\t\tconst s1 = {\n\t\t\tbpmRange: this.refs.bpmRange.getValue(),\n\t\t\tbeatsPerStep: this.refs.beatsPerStep.getValue(),\n\t\t\taccents: this.refs.barManager.getValue()\n\t\t};\n\n\t\tconst s2 = this.refs.modePanel.getValue();\n\n\t\tconst state = { ...s1, ...s2 };\n\n\t\t// console.log(\"<App>GetUiState returns\", state);\n\t\treturn state;\n\t}\n\n\tonAccentsChange() {\n\t\tthis.refs.sm.setAccents(this.refs.barManager.getValue());\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App  /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}