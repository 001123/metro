{"version":3,"sources":["components/SoundMachineInstrument.jsx","components/AccentTypes.jsx","components/SoundMachine.jsx","components/Planner.jsx","components/AdvancedSlider.jsx","components/AdvancedRange.jsx","components/BarManager.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SoundMachineInstrument","props","Object","classCallCheck","this","o","C3","samples","C#3","D3","possibleConstructorReturn","getPrototypeOf","call","baseUrl","key","Sampler","accentTypes","ACCENT_1","ACCENT_2","ACCENT_3","SoundMachine","_this","instrumentTypes","TABLA","ELECTRO","SYNTH","beatsPerStep","accentNotes","state","instrument","isPlaying","accents","instruments","part","setBpm","bpm","Tone","Transport","value","setBeatsPerStep","newBps","console","log","restart","sampler","stop","removeAll","dispose","undefined","score","i","push","Part","time","note","triggerAttackRelease","setAccents","timeSignature","loopEnd","loop","start","getBpm","Error","_this2","Synth","toMaster","Buffer","on","tabla","electro","context","latencyHint","instrumentKey","setState","accentTypesArr","length","at","react_default","a","createElement","Component","Planner","currentStep","bars","timer","ref","startTime","stepsCounter","planChanged","onChange","barRender","b","cls","step","className","formatTime","segmentDuration","toFixed","plan","bar","timeEnd","end","startTimeFormatted","endTimeFormatted","prevState","disposeTimer","resetStep","clearInterval","onAdvance","onInterval","bind","setInterval","Date","getCurrentStep","_this3","Container","map","t","timeInSeconds","setSeconds","m","getMinutes","getSeconds","padTime","AdvancedSlider","get","prototype","Badge","onClick","onBadgeClick","Slider","AdvancedRange","bounds","Range","BarManager","renderCells","Button","size","color","getBtnColor","type","idx","handleCellClick","prepareBars","defaultValue","amount","oldVal","getValue","toConsumableArray","onAfterChange","selected","newType","forceUpdate","ButtonGroup","availableInstruments","App","timerRef","cycleLockType","SEGMENT","STEP","bpmRange","exerciseDuration","totalSteps","currentBpm","constantMode","instrumentDropdownOpen","cycleDropdownOpen","totalStepsChanged","s","getUiState","refs","planner","setPlan","makePlan","onBeatsPerStepChange","sm","barManager","setBarsAmount","exerciseDurationChanged","newPlan","onPlanAdvanced","newStep","newBpm","onPlanChanged","getCurrentBar","handleStartStop","newInstrument","setInstrument","newCycle","Row","Col","xs","ButtonDropdown","isOpen","toggle","onCycleLockChange","DropdownToggle","caret","DropdownMenu","DropdownItem","onCycleSelect","components_AdvancedSlider","min","max","components_BarManager","onAccentsChange","components_AdvancedRange","pushable","onBpmRangeChange","_this4","onInstrumentChange","onInstrumentSelect","renderTempoPane","renderPlaybackPane","renderCyclePane","_this5","components_Planner","renderPlanPane","_this6","components_SoundMachine","renderLeftPane","renderRightPane","ld","deltaBpm","segments","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.796f39db.chunk.js","sourcesContent":["import {Sampler} from 'tone'\r\n\r\n\r\nclass SoundMachineInstrument extends Sampler {\r\n\r\n    constructor(props) {\r\n        var o = {\r\n            \"C3\" : props.samples[0],\r\n            \"C#3\" : props.samples[1],\r\n            \"D3\" : props.samples[2],\r\n        };\r\n        super(o,{\r\n            baseUrl: props.baseUrl || './audio/' + props.key + '/'\r\n        });\r\n    }\r\n}\r\n\r\nexport default SoundMachineInstrument;\r\n\r\n ","export const accentTypes = {\r\n\tACCENT_1: 0,\r\n\tACCENT_2: 1,\r\n\tACCENT_3: 2\r\n};","import React, { Component } from \"react\";\r\nimport Tone from \"tone\";\r\nimport SoundMachineInstrument from \"./SoundMachineInstrument\";\r\nimport { accentTypes } from \"./AccentTypes\";\r\n\r\nclass SoundMachine extends Component {\r\n\tinstrumentTypes = {\r\n\t\tTABLA: \"tabla\",\r\n\t\tELECTRO: \"electro\",\r\n\t\tSYNTH: \"synth\"\r\n\t};\r\n\r\n\tbeatsPerStep = 3;\r\n\r\n\taccentNotes = [\"C3\", \"C#3\", \"D3\"]; // this stay in sync with AccentTypes\r\n\r\n\tstate = {\r\n\t\t//isInitialized: false,\r\n\t\tinstrument: this.instrumentTypes.TABLA,\r\n\t\t//beatsPerStep: 3,\r\n\t\tisPlaying: false\r\n\t};\r\n\r\n\taccents = [accentTypes.ACCENT_1]; // default with accent on first beat\r\n\tsamples = {};\r\n\r\n\tinstruments = {};\r\n\r\n\tpart = null;\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tif (!props.beatsPerStep) {\r\n\t\t\tthrow new Error(\"props.beatsPerStep is missing\");\r\n\t\t}\r\n\t\t//  this.state.beatsPerStep = props.beatsPerStep;\r\n\t\tthis.beatsPerStep = props.beatsPerStep;\r\n\r\n\t\t// initialize accents array with ticks\r\n\t\t// for (let i = 0 ; i < props.beatsPerStep ; i++) {\r\n\t\t//     this.accents.push({\r\n\t\t//          idx: i,\r\n\t\t//          type: accentTypes.ACCENT_2\r\n\t\t//     })\r\n\t\t// }\r\n\t\t// this.refreshAccentsArray(props.beatsPerStep);\r\n\r\n\t\t// set accent on first beat\r\n\t\t// this.accents[0].type =  accentTypes.ACCENT_1\r\n\t}\r\n\r\n\t// initAccentsArray() {\r\n\t//     // initialize accents array with ticks\r\n\t//     console.log('initAccentsArray()')\r\n\t//     // for (let i = 0 ; i < this.state.beatsPerStep ; i++) {\r\n\t//     for (let i = 0 ; i < this.beatsPerStep ; i++) {\r\n\t//         this.accents.push({\r\n\t//              idx: i,\r\n\t//              type: accentTypes.ACCENT_2\r\n\t//         })\r\n\t//     }\r\n\t//     // set accent on first beat\r\n\t//     this.accents[0].type =  accentTypes.ACCENT_1\r\n\t// }\r\n\r\n\tcomponentDidMount() {\r\n\t\t// reload/debug bell\r\n\t\tvar synth = new Tone.Synth().toMaster();\r\n\t\tsynth.triggerAttackRelease(\"A2\");\r\n\r\n\t\tTone.Buffer.on(\"load\", () => this.restart());\r\n\r\n\t\tvar tabla = new SoundMachineInstrument({\r\n\t\t\tkey: \"tabla\",\r\n\t\t\tsamples: [\"dha-slide.wav\", \"dhin-slide.wav\", \"tin.wav\"]\r\n\t\t}).toMaster();\r\n\r\n\t\tthis.instruments[this.instrumentTypes.TABLA] = tabla;\r\n\r\n\t\tvar electro = new SoundMachineInstrument({\r\n\t\t\tkey: \"machine\",\r\n\t\t\tsamples: [\"Kick.wav\", \"HiHat.wav\", \"Snare.wav\"]\r\n\t\t}).toMaster();\r\n\r\n\t\tthis.instruments[this.instrumentTypes.ELECTRO] = electro;\r\n\r\n\t\tTone.context.latencyHint = \"playback\";\r\n\r\n\t\t// TODO: dispatch ready event, so we can enable UI elements\r\n\t}\r\n\r\n\tsetInstrument(instrumentKey) {\r\n\t\t// TODO validate key\r\n\t\tconsole.log('<SoundMachine>new instrument', instrumentKey)\r\n\t\tthis.setState({ instrument: instrumentKey }, this.restart);\r\n\t}\r\n\r\n\tsetBpm = bpm => {\r\n\t\tTone.Transport.bpm.value = bpm;\r\n\t};\r\n\r\n\tsetBeatsPerStep = newBps => {\r\n\t   \r\n        this.beatsPerStep = newBps;\r\n        \r\n        console.log(\"<SoundMachine>setBeatsPerStep\", newBps)\r\n        \r\n        this.restart()\r\n\r\n\t\t//     this.restart();\r\n\t\t// this.setState({beatsPerStep: newBeatsPerStep}, this.restart);\r\n\t};\r\n\r\n\trestart = () => {\r\n\t\t// check accents array so we know what to play\r\n\t\t// this.refreshAccentsArray()\r\n\r\n\t\tconsole.log(\"<SoundMachine>restart()\");\r\n\r\n\t\tvar sampler = this.instruments[this.state.instrument];\r\n\r\n\t\tif (this.part) {\r\n\t\t\tconsole.log(\"clearing this.part\");\r\n\t\t\tthis.part.stop()\t\r\n\t\t\tthis.part.removeAll()\r\n\t\t\tthis.part.dispose();\r\n\t\t\t// console.log(\"disposed this.part\", this.part);\r\n\t\t\tthis.part = undefined; // maybe it will help with garbage collection?\r\n\t\t}\r\n\r\n\t\tlet score = [];\r\n\t\t// init with ACCENT_2 note, it will be changed in setAccents\r\n\t\t// for (let i = 0 ; i < this.state.beatsPerStep; i++) {\r\n\t\tfor (let i = 0; i < this.beatsPerStep; i++) {\r\n\t\t\tscore.push([\"0:\" + i, this.accentNotes[accentTypes.ACCENT_2]]);\r\n\t\t}\r\n\r\n\t\tconsole.log(\"new score \", score);\r\n\r\n\t\tthis.part = new Tone.Part(function(time, note) {\r\n\t\t\t// trigger note\r\n\t\t\tsampler.triggerAttackRelease(note, \"4n\", time);\r\n\t\t}, score);\r\n\r\n\t\t// setting accents\r\n\t\t// console.log(\"this.part\", this.part);\r\n\t\t// debugger\r\n\t\tthis.setAccents(this.accents);\r\n\r\n\t\t// set signature\r\n\t\tconsole.log('setting timeSignature',this.beatsPerStep)\r\n\t\tTone.Transport.timeSignature = [this.beatsPerStep, 4];\r\n\t\t// this.part.humanize = true; // this one is interesting\r\n\t\tthis.part.loopEnd = \"1m\"; // + this.state.beatsPerStep;\r\n\t\tthis.part.loop = true;\r\n\r\n\t\t// if (this.state.isPlaying === true ) {\r\n\t\t\tconsole.log('transpor was playing so play part')\r\n\t\t\tthis.part.start(0);\r\n\t\t// }\r\n\t};\r\n\r\n\t// setAccents(accentIdxArray) {\r\n\t//     this.accents = accentIdxArray;\r\n\t//     for (let i = 0 ; i < this.part.length; i++) {\r\n\t//         this.part.at(\"0:\"+i, this.accents.indexOf(i) < 0 ? this.tickNote: this.accentNote);\r\n\t//     }\r\n\t// }\r\n \r\n\tsetAccents(accentTypesArr) {\r\n\t\t// if (accentTypesArr.length != this.part.length) {\r\n\t\t//     throw new Error(\"accentTypes has incorrect number of elements \" + accentTypesArr.length + \" vs \" + this.part.length)\r\n\t\t// }\r\n\t\tthis.accents = accentTypesArr;\r\n\r\n\t\tfor (let i = 0; i < this.part.length; i++) {\r\n\t\t\t// by default 2 will be the tick note\r\n\t\t\tlet note = this.accentNotes[accentTypes.ACCENT_2];\r\n\r\n\t\t\t// if accent for this step is specified set it here\r\n\t\t\tif (\r\n\t\t\t\taccentTypesArr[i] !== undefined &&\r\n\t\t\t\taccentTypesArr[i] == accentTypes.ACCENT_1\r\n\t\t\t) {\r\n\t\t\t\tnote = this.accentNotes[accentTypes.ACCENT_1];\r\n\t\t\t} else if (\r\n\t\t\t\taccentTypesArr[i] !== undefined &&\r\n\t\t\t\taccentTypesArr[i] == accentTypes.ACCENT_3\r\n\t\t\t) {\r\n\t\t\t\tnote = this.accentNotes[accentTypes.ACCENT_3];\r\n\t\t\t}\r\n\t\t\tthis.part.at(\"0:\" + i, note);\r\n\t\t\t// this.part.at(\"0:\"+i, this.accents.indexOf(i) < 0 ? this.tickNote: this.accentNote);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\tSound is {this.state.isPlaying === true ? \"playing\" : \"stopped\"}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// toggle() {\r\n\t//     if (Tone.Transport.state === \"started\") {\r\n\t//         this.stop();\r\n\t//     }\r\n\t//     else {\r\n\t//         this.start()\r\n\t//     }\r\n\t// }\r\n\r\n\tstop() {\r\n\t\tconsole.log(\"<SoundMachine>stop()\");\r\n\t\tthis.setState({ isPlaying: false });\r\n\t\t//Tone.Transport.stop();\r\n\t\tTone.Transport.stop();\r\n\t\t// if (this.part) {\r\n\t\t// \tthis.part.stop();\r\n\t\t// }\r\n\t}\r\n\r\n\tstart() {\r\n\t\tconsole.log(\"<SoundMachine>start()\");\r\n\r\n\t\t// Tone.Transport.start(\"+0.05\");\r\n\t\tthis.setState({ isPlaying: true });\r\n\t\t// debugger\r\n\t\tTone.Transport.start(\"+0.1\");\r\n\t\tthis.restart();\r\n\t\t// if (this.part) {\r\n\t\t// \tthis.part.start();\r\n\t\t// }\r\n\t\t// if (this.part) {\r\n\t\t// \tthis.part.start(\"+0.1\");\r\n\t\t// }\r\n\t}\r\n\r\n\tgetBpm = () => {\r\n\t\treturn Tone.Transport.bpm.value;\r\n\t};\r\n}\r\n\r\nexport default SoundMachine;\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col, Button, Badge } from \"reactstrap\";\r\n\r\nclass Planner extends Component {\r\n\tstate = {\r\n\t\tcurrentStep: 0,\r\n\t\tbars: []\r\n\t};\r\n\r\n\ttimer = {\r\n\t\tref: null,\r\n\t\tstartTime: null\r\n\t};\r\n\tstepsCounter = 0;\r\n\r\n\tsetPlan(plan) {\r\n\t\tconsole.log(\"<Planner>setPlan\", plan)\r\n\t\tvar bars = [];\r\n\r\n\t\tfor (var i = 0; i < plan.length; i++) {\r\n\t\t\tconst bar = {\r\n\t\t\t\ttime: plan[i].time,\r\n\t\t\t\ttimeEnd: plan[i].end,\r\n\t\t\t\tsegmentDuration: plan[i].end - plan[i].time,\r\n\t\t\t\tstartTimeFormatted: this.formatTime(plan[i].start),\r\n        \t\tendTimeFormatted: this.formatTime(plan[i].end),\r\n\t\t\t\tbpm: plan[i].bpm,\r\n\t\t\t\tstep: this.stepsCounter++\r\n      \t\t};\r\n\r\n\t\t\tbars.push(bar);\r\n\t\t}\r\n\r\n\t\t// update to new state\r\n\t\tthis.stepsCounter = 0;\r\n\r\n\t\tthis.setState(prevState => ({\r\n\t\t\tcurrentStep: 0,\r\n\t\t\tbars: bars\r\n\t\t}), () => this.planChanged());\r\n\t}\r\n\r\n\tstop() {\r\n\t\tif (this.timer) {\r\n\t\t\t// clear timer\r\n\t\t\tthis.disposeTimer(this.timer.ref)\r\n\t\t\t// reset to first step\r\n\t\t\t\r\n\t\t}\r\n\t\tthis.resetStep();\r\n\t\t\r\n\t}\r\n\r\n\r\n\tdisposeTimer(ref) {\r\n\t\tif (this.timer.ref !== ref) {\r\n\t\t\tthrow new Error(\"Wront timer.ref to dispose\")\t\t\t\r\n\t\t}\r\n\t\tconsole.log(\"<Planner>clearing interval, \", this.timer.ref)\r\n\t\tclearInterval(this.timer.ref);\r\n\t\tthis.timer.ref = undefined;\r\n\t\tthis.timer.startTime = null;\r\n\t\tthis.timer = undefined;\r\n\t\t\t\r\n\t}\r\n\tonInterval() {\r\n\t\tvar currentStep = this.state.currentStep;\r\n\t\t\r\n\t\t// check if we're not at the end of plan\r\n\t\tif (currentStep + 1 >= this.state.bars.length) {\r\n\t\t\tconsole.log('no more steps, please stop()')\r\n\t\t\tthis.disposeTimer(this.timer.ref)\r\n\t\t\tthis.props.onAdvance(null)\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconsole.log('<Planner>onInterval', this.state.currentStep + 1)\r\n\t\t// console.log('advancing step to' , currentStep + 1)\r\n\t\tthis.setState({ currentStep: currentStep + 1 });\r\n    \t// console.log('returning' , this.state.currentStep)\r\n    \tthis.props.onAdvance(this.state.bars[this.state.currentStep]);\r\n\t}\r\n\r\n\r\n\tstart() {\r\n\r\n\t\tconsole.log(\"<Planner>start()\");\r\n\t\t// debugger\r\n\t\t// make sure we dispose any timer that's currently set\r\n\t\tif (this.timer) {\r\n\t\t\t// console.log(\"<Planner>startTimer() old timer disposed\");\r\n\t\t\tclearInterval(this.timer.ref);\r\n\t\t\tthis.timer.ref = undefined;\r\n\t\t\tthis.timer.startTime = null;\r\n\t\t\tthis.resetStep();\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// calc segment length between steps and set timer for such\r\n\t\tconst time = 1000 * (this.state.bars[this.state.currentStep].timeEnd -  this.state.bars[this.state.currentStep].time);\r\n\t\tvar onInterval = this.onInterval.bind(this)\r\n\t\tconsole.log('setting interval', time)\r\n\t\t\r\n\t\tthis.timer = {\r\n\t\t\tref: setInterval(onInterval, time ),\r\n\t\t\tstartTime: new Date()\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.stepsCounter = 0;\r\n\t\tthis.setState({ bars: [], currentStep: 0 });\r\n\t\tthis.planChanged();\r\n\t}\r\n\r\n\tplanChanged = () => {\r\n\t\tconsole.log(\"<Planner>planChanged\")\r\n\t\tif (this.props.onChange) {\r\n\t\t\t// console.log(\"<Planner>fire onChange\");\r\n\t\t\tthis.props.onChange();\r\n\t\t}\r\n\t};\r\n\r\n\tresetStep() {\r\n\t\tthis.setState({ currentStep: 0 });\r\n    \tthis.props.onAdvance(this.state.bars[0]);\r\n  \t}\r\n  \r\n\r\n\tgetCurrentBar() {\r\n\t\tif (this.state.getCurrentStep >= this.state.bars.length) {\r\n\t\t\tthrow new Error(\"we are fcked\");\r\n\t\t}\r\n\t\treturn this.state.bars[this.state.currentStep];\r\n\t} \r\n\r\n\tbarRender = b => {\r\n\t\t// let cls =\r\n\t\t// \t\"badge badge-\" +\r\n\t\t// \t(this.state.currentStep === b.step ? \"primary\" : \"secondary\");\r\n\t\tlet cls = (this.state.currentStep === b.step ? \"current-step\" : \"\");\r\n\t\treturn (\r\n\t\t\t<div className={cls} key={\"key_\" + b.bpm}>\r\n\t\t\t\t{this.formatTime(b.segmentDuration.toFixed(0))} at {b.bpm.toFixed(0)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n  \r\n\trender() {\r\n\t\t// console.log(\"<Planner> render\");\r\n\t\t// don't doo much if no plan yet\r\n\t\tif (this.state.bars.length === 0) {\r\n\t\t\treturn <div>No plan</div>;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<Container  className=\"Planner\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.state.bars.map(bar => this.barRender(bar))}\r\n\t\t\t\t</div>\r\n\t\t\t</Container>\r\n\t\t);\r\n  }\r\n  \r\n\tpadTime(t) {\r\n\t\treturn t < 10 ? \"0\" + t : t;\r\n\t}\r\n\r\n\tformatTime(timeInSeconds) {\r\n\t\t//{this.leadingZeroCheck(now.getMinutes())}:{now.getSeconds()} --\r\n\t\tlet t = new Date(0, 0, 0, 0, 0, 0, 0);\r\n\t\tt.setSeconds(timeInSeconds);\r\n\t\tlet m = t.getMinutes();\r\n\t\tlet s = t.getSeconds();\r\n\t\tlet o = ''\r\n\t\tif (m != 0) {\r\n\t\t\to += t.getMinutes();//this.padTime(t.getMinutes()); \r\n\t\t\to += ':'\r\n\t\t}\r\n\t\to +=  \"\" + this.padTime(t.getSeconds()) + 's';\r\n\t\treturn o;\r\n\t}\r\n}\r\n\r\nexport default Planner;\r\n","import React from 'react'\r\nimport Slider from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n// import {Container, Row, Col} from 'reactstrap'\r\n\r\nclass AdvancedSlider extends Slider {\r\n \r\n    // constructor(props) {\r\n    //     super(props)\r\n    //     // if (props.renderVal) {\r\n    //     //     this.renderVal = props.renderVal\r\n    //     // }\r\n    \r\n    // }\r\n    render() { \r\n        return (\r\n            <div>\r\n                {super.render()}\r\n                <div><Badge  onClick={this.onBadgeClick} className=\"d-i\">{this.state.value}</Badge></div>\r\n            </div>\r\n            );\r\n    }\r\n\r\n    onBadgeClick() {\r\n        // attach editorInPlace\r\n    }\r\n \r\n}\r\n\r\nexport default AdvancedSlider\r\n","import React from 'react'\r\nimport { Range } from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n\r\nclass AdvancedRange extends Range {\r\n    render() { \r\n        return (<div>\r\n            {super.render()}\r\n            <Badge onClick={this.onBadgeClick} className=\"d-i\">{this.state.bounds[0]} - {this.state.bounds[1]}</Badge>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default AdvancedRange;\r\n","import React, { Component } from \"react\";\r\nimport { Button, ButtonGroup } from \"reactstrap\";\r\nimport { accentTypes } from \"./AccentTypes\";\r\n\r\n\r\nclass BarManager extends Component {\r\n\r\n\tstate = {\r\n\t\tbars: []\r\n\t};\r\n\r\n\r\n\taccents = [accentTypes.ACCENT_1,accentTypes.ACCENT_2,accentTypes.ACCENT_3];\r\n\tconstructor(props) {\r\n\t\tsuper(props);\t\t\r\n\t\tthis.state.bars = this.prepareBars(props.defaultValue);\r\n\t\t\r\n\t\t// by def set accent on first beat\r\n\t\tthis.state.bars[0].type = accentTypes.ACCENT_1;\r\n\t}\r\n\r\n\tprepareBars(amount) {\r\n\t\t\r\n\t\tlet oldVal = this.getValue();\r\n\r\n\t\tlet  bars = [];\r\n\t\tfor (let i = 0; i < amount; i++) {\r\n\t\t\tbars.push({\r\n\t\t\t\tidx: i,\r\n\t\t\t\ttype: (oldVal[i]  !== undefined) ? oldVal[i] : accentTypes.ACCENT_2\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tsetBarsAmount(amount) {\r\n\t\tlet bars = this.prepareBars(amount);\r\n\t\t// set state and send onAfterChange once updated as they have changed surely (at least the amount)\r\n\t\tthis.setState({ bars: [...bars] },  this.props.onAfterChange);\r\n\t}\r\n\r\n\thandleCellClick(selected) {\r\n\t\t// this.bars[selected]\r\n\t\tlet  bar = this.state.bars[selected]\r\n\t\t\r\n\t\tconst type = bar.type;\r\n\r\n\t\tlet newType = this.accents[(type + 1 ) % 3];\r\n\t\t\r\n\t\tthis.state.bars[selected].type = newType;\r\n\t\tthis.forceUpdate();\r\n\r\n\r\n\r\n\t\t/// hmm good patern to update arrays in state, doesn't want to lose it \r\n\t\t// const index = this.state.accentBars.indexOf(selected);\r\n\t\t// if (index < 0) {\r\n\t\t// \tthis.state.accentBars.push(selected);\r\n\t\t// } else {\r\n\t\t// \tthis.state.accentBars.splice(index, 1);\r\n\t\t// }\r\n\t\t// this.setState({ accentBars: [...this.state.accentBars] });\r\n\t}\r\n\r\n\tgetValue() {\r\n\t\tvar bars = []\r\n\t\tfor (let i = 0 ; i < this.state.bars.length ; i ++) {\r\n\t\t\tbars.push(this.state.bars[i].type)\r\n\t\t}\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tgetBtnColor(type) {\r\n\t\tvar color;\r\n\t\tswitch (type) {\r\n\t\t\tcase accentTypes.ACCENT_2:\r\n\t\t\t\tcolor = \"secondary\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase accentTypes.ACCENT_3:\r\n\t\t\t\tcolor = \"warning\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tcolor = \"primary\"\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\trenderCells = bars => {\r\n\t\treturn bars.map(bar => (\r\n\t\t\t<Button\r\n\t\t\t\tsize=\"sm\"\r\n\t\t\t\t color={this.getBtnColor(bar.type)}\r\n\t\t\t\t// className=\"btn-state-1\"\r\n\t\t\t\tkey={\"barkey_\" + bar.idx}\r\n\t\t\t\tonClick={() => this.handleCellClick(bar.idx)}\r\n\t\t\t\t// active={!this.state.accentBars.includes(bar)}\r\n\t\t\t>\r\n\t\t\t\t{bar.idx + 1}\r\n\t\t\t</Button>\r\n\t\t));\r\n\t};\r\n\r\n\trender() {\r\n\t\t// dunno how this works but it does the job bubbling up the click event\r\n\t\tconst { onAfterChange } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<ButtonGroup onClick={onAfterChange}>\r\n\t\t\t\t{this.renderCells(this.state.bars)}\r\n\t\t\t</ButtonGroup>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BarManager;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./components/SoundMachine\";\nimport SoundMachine from \"./components/SoundMachine\";\nimport Planner from \"./components/Planner\";\nimport \"rc-slider/assets/index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Container, Row, Col, Button, Fade } from \"reactstrap\";\nimport {\n\tButtonDropdown,\n\tDropdownToggle,\n\tDropdownMenu,\n\tDropdownItem\n} from \"reactstrap\";\nimport AdvancedSlider from \"./components/AdvancedSlider\";\nimport AdvancedRange from \"./components/AdvancedRange\";\nimport BarManager from \"./components/BarManager\";\n\nconst availableInstruments = {\n\ttabla: \"tabla\",\n\telectro: \"electro\"\n};\n\n\n\nclass App extends Component {\n\ttimer = {\n\t\ttimerRef: null,\n\t\tstartTime: null\n\t};\n\n\n\t\n\t// based on this value we will wait till segment or steps are finished to advance speed\n\tcycleLockType = {\n\t\tSEGMENT: \"segment\",\n\t\tSTEP: \"step\"\n\t};\n\n\tstate = {\n\t\tbpmRange: [200, 400],\n\t\texerciseDuration: 1 * 60, // 1 minute\n\t\t//segmentDuration: 5, // 5 seconds\n\t\ttotalSteps: 10, // 10 steps\n\t\tbeatsPerStep: 4,\n\t\tcurrentBpm: 60,\n\t\tinstrument: \"tabla\",\n\t\tconstantMode: this.cycleLockType.STEP,\n    instrumentDropdownOpen: false,\n    cycleDropdownOpen: false\n\t};\n\n\tcomponentDidMount() {\n\t\t// initialize with UI settings\n\t\tthis.refs.planner.setPlan(this.makePlan(this.getUiState()));\n\t\t// TODO for layout debug\n\t\t//this.settingsChanged();\n\t}\n\tonInstrumentSelect(newInstrument) {\n\t\tthis.refs.sm.setInstrument(newInstrument);\n\t\tthis.setState({ instrument: newInstrument });\n\t}\n  \n  onCycleSelect(newCycle) {\n    this.setState({constantMode: newCycle});\n  }\n\n\trenderCyclePane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">CYCLE</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs=\"3\">Constant</Col>\n\t\t\t\t\t<Col>\n          <ButtonDropdown\n\t\t\t\t\t\t\t\t\t\t\tisOpen={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.cycleDropdownOpen\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\ttoggle={() =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.onCycleLockChange()\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret>\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.constantMode}\n\t\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\n\t\t\t\t\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.onCycleSelect(this.cycleLockType.SEGMENT);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tTime\n\t\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.onCycleSelect(this.cycleLockType.STEP);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tStep\n\t\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t\t\t\t\t</ButtonDropdown>\n          \n          </Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={3}>Total time (min)</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedSlider\n\t\t\t\t\t\t\tref=\"exerciseDuration\"\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tmax={30}\n\t\t\t\t\t\t\tdefaultValue={this.state.exerciseDuration / 60}\n\t\t\t\t\t\t\tonAfterChange={() =>\n\t\t\t\t\t\t\t\tthis.exerciseDurationChanged()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={3}>Beats per step</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedSlider\n\t\t\t\t\t\t\tref=\"beatsPerStep\"\n\t\t\t\t\t\t\tmin={2}\n\t\t\t\t\t\t\tmax={16}\n\t\t\t\t\t\t\tdefaultValue={this.state.beatsPerStep}\n\t\t\t\t\t\t\tonAfterChange={() => this.onBeatsPerStepChange()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={3}>Number of steps</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedSlider\n\t\t\t\t\t\t\tref=\"totalSteps\"\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tmax={60}\n\t\t\t\t\t\t\tdefaultValue={this.state.totalSteps}\n\t\t\t\t\t\t\tonAfterChange={() =>\n\t\t\t\t\t\t\t\tthis.totalStepsChanged()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={3}>Accents</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<BarManager\n\t\t\t\t\t\t\tonAfterChange={() => this.onAccentsChange()}\n\t\t\t\t\t\t\tref=\"barManager\"\n\t\t\t\t\t\t\tdefaultValue={this.state.beatsPerStep}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderTempoPane() {\n\t\t// debugger\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">TEMPO</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs=\"3\">BPM</Col>\n\t\t\t\t\t\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<AdvancedRange\n\t\t\t\t\t\t\tref=\"bpmRange\"\n\t\t\t\t\t\t\tmin={30}\n\t\t\t\t\t\t\tmax={600}\n\t\t\t\t\t\t\tdefaultValue={[\n\t\t\t\t\t\t\t\tthis.state.bpmRange[0],\n\t\t\t\t\t\t\t\tthis.state.bpmRange[1]\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tpushable={true}\n\t\t\t\t\t\t\tonAfterChange={() => this.onBpmRangeChange()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\n\trenderPlaybackPane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">PLAYBACK</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs=\"3\">Instrument</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<ButtonDropdown\n\t\t\t\t\t\t\tisOpen={this.state.instrumentDropdownOpen}\n\t\t\t\t\t\t\ttoggle={() => this.onInstrumentChange()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DropdownToggle caret>\n\t\t\t\t\t\t\t\t{this.state.instrument}\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t<DropdownMenu>\n\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.onInstrumentSelect(\n\t\t\t\t\t\t\t\t\t\t\tavailableInstruments.tabla\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tTabla\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.onInstrumentSelect(\n\t\t\t\t\t\t\t\t\t\t\tavailableInstruments.electro\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tElectro\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t</ButtonDropdown>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs=\"3\">Playback</Col>\n\t\t\t\t\t<Col>One Time/LoopBack/Repeat</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\trenderLeftPane() {\n\t\treturn (\n\t\t\t<Container className=\"side-panel\">\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderTempoPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderPlaybackPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderCyclePane()}</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderExamplesPane() {\n\t\treturn (\n\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">EXAMPLES</Row>\n\t\t\t\t<Row>Not implemented</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trenderPlanPane() {\n\t\treturn (\n\t\t\t\t<Container className=\"pane\">\n\t\t\t\t<Row className=\"pane-title\">Plan</Row>\n\t\t\t\t<Row><Planner\n\t\t\t\t\tconstantMode={this.state.constantMode}\n\t\t\t\t\t//plan={this.makePlan(this.state)}\n\t\t\t\t\tonChange={() => this.onPlanChanged()}\n\t\t\t\t\tonAdvance={(currentStep) => this.onPlanAdvanced(currentStep)}\n\t\t\t\t\tref=\"planner\"\n\t\t\t\t/></Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\trenderRightPane() {\n\t\treturn (\n\t\t\t<Container className=\"side-panel\">\n\t\t\t\t{/* <Row>\n\t\t\t\t\t<Col>{this.renderExamplesPane()}</Col>\n\t\t\t\t</Row> */}\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Container className=\"pane\">\n\t\t\t\t\t\t\t<Row className=\"pane-title\">\n\t\t\t\t\t\t\t\tBPM\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col> {this.state.currentBpm.toFixed(0)}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>{this.renderPlanPane()}</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<SoundMachine ref=\"sm\" beatsPerStep={this.state.beatsPerStep}/>\n\t\t\t\t<Container>\n\t\t\t\t\t{/* outer table */}\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t{/* left pane with controls */}\n\t\t\t\t\t\t\t{this.renderLeftPane()}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col sm=\"4\">\n\t\t\t\t\t\t\t{/* right pane with examples and plan*/}\n\t\t\t\t\t\t\t{this.renderRightPane()}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n          <Row>\n            <Col ld={8}>\n            <Button onClick={() => this.handleStartStop()}>\n              Start / Stop\n            </Button>\n            </Col>\n          </Row>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n\t// render_old() {\n\t// \treturn (\n\t// \t\t<div className=\"App\">\n\t// \t\t\t<SoundMachine ref=\"sm\" />\n\t// \t\t\t<Button onClick={() => this.handleStartStop()}>\n\t// \t\t\t\tStart / Stop\n\t// \t\t\t</Button>\n\t// \t\t\t{/* <button onClick = {() => this.handleSpeedChange(20) } > Speed Up </button>  \n  //                               <button onClick = {() => this.handleSpeedChange(-20) } > SPeed Down </button>  */}\n\t// \t\t\t<Container>\n\t// \t\t\t\t<Row>\n\t// \t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t{/* here goes sliders */}\n\t// \t\t\t\t\t\t<Container>\n\t// \t\t\t\t\t\t\t<Row className=\"p-2\">\n\t// \t\t\t\t\t\t\t\t<Col\n\t// \t\t\t\t\t\t\t\t\txs={5}\n\t// \t\t\t\t\t\t\t\t\tclassName=\"badge badge-primary \"\n\t// \t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\tBPM Range\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t\t\t\t<AdvancedRange\n\t// \t\t\t\t\t\t\t\t\t\tref=\"bpmRange\"\n\t// \t\t\t\t\t\t\t\t\t\tmin={30}\n\t// \t\t\t\t\t\t\t\t\t\tmax={600}\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={[\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.state.bpmRange[0],\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.state.bpmRange[1]\n\t// \t\t\t\t\t\t\t\t\t\t]}\n\t// \t\t\t\t\t\t\t\t\t\tpushable={true}\n\t// \t\t\t\t\t\t\t\t\t\tonAfterChange={() =>\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.settingsChanged()\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t/>\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t</Row>\n\t// \t\t\t\t\t\t\t<Row className=\"p-2\">\n\t// \t\t\t\t\t\t\t\t<Col xs={5} className=\"badge badge-primary\">\n\t// \t\t\t\t\t\t\t\t\tSegment Duration(s)\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t\t\t\t<AdvancedSlider\n\t// \t\t\t\t\t\t\t\t\t\tref=\"segmentDuration\"\n\t// \t\t\t\t\t\t\t\t\t\tmin={1}\n\t// \t\t\t\t\t\t\t\t\t\tmax={120}\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.state.segmentDuration\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t\tonAfterChange={() =>\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.segmentDurationChanged()\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t/>\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t</Row>\n\t// \t\t\t\t\t\t\t<Row className=\"p-2\">\n\t// \t\t\t\t\t\t\t\t<Col xs={5} className=\"badge badge-primary\">\n\t// \t\t\t\t\t\t\t\t\tTotal time(min)\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t\t\t\t<AdvancedSlider\n\t// \t\t\t\t\t\t\t\t\t\tref=\"exerciseDuration\"\n\t// \t\t\t\t\t\t\t\t\t\tmin={1}\n\t// \t\t\t\t\t\t\t\t\t\tmax={30}\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.state.exerciseDuration / 60\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t\tonAfterChange={() =>\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.settingsChanged(\n\t// \t\t\t\t\t\t\t\t\t\t\t\tthis.uiElements\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t.exerciseDuration\n\t// \t\t\t\t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t/>\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t</Row>\n\t// \t\t\t\t\t\t\t<Row className=\"p-2\">\n\t// \t\t\t\t\t\t\t\t<Col xs={5} className=\"badge badge-primary\">\n\t// \t\t\t\t\t\t\t\t\tNumber of steps\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t\t\t\t<AdvancedSlider\n\t// \t\t\t\t\t\t\t\t\t\tref=\"totalSteps\"\n\t// \t\t\t\t\t\t\t\t\t\tmin={1}\n\t// \t\t\t\t\t\t\t\t\t\tmax={50}\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={this.state.totalSteps}\n\t// \t\t\t\t\t\t\t\t\t\tonAfterChange={() =>\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.settingsChanged(\n\t// \t\t\t\t\t\t\t\t\t\t\t\tthis.uiElements.totalSteps\n\t// \t\t\t\t\t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t/>\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t</Row>\n\t// \t\t\t\t\t\t\t<Row className=\"p-2\">\n\t// \t\t\t\t\t\t\t\t<Col xs={5} className=\"badge badge-primary\">\n\t// \t\t\t\t\t\t\t\t\tBeats per step\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t\t\t\t<AdvancedSlider\n\t// \t\t\t\t\t\t\t\t\t\tref=\"beatsPerStep\"\n\t// \t\t\t\t\t\t\t\t\t\tmin={2}\n\t// \t\t\t\t\t\t\t\t\t\tmax={16}\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.state.beatsPerStep\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t\tonAfterChange={() =>\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.settingsChanged()\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t/>\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t</Row>\n\t// \t\t\t\t\t\t\t<Row className=\"p-2\">\n\t// \t\t\t\t\t\t\t\t<Col xs={5} className=\"badge badge-primary\">\n\t// \t\t\t\t\t\t\t\t\tBar Manager\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t\t\t\t<BarManager\n\t// \t\t\t\t\t\t\t\t\t\tonAfterChange={() =>\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.onAccentsChange()\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t\tref=\"barManager\"\n\t// \t\t\t\t\t\t\t\t\t\tdefaultValue={\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.state.beatsPerStep\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t/>\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t</Row>\n\t// \t\t\t\t\t\t\t<Row className=\"p-2\">\n\t// \t\t\t\t\t\t\t\t<Col xs={5} className=\"badge badge-primary\">\n\t// \t\t\t\t\t\t\t\t\tInstrument\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t\t<Col>\n\t// \t\t\t\t\t\t\t\t\t<ButtonDropdown\n\t// \t\t\t\t\t\t\t\t\t\tisOpen={\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.state\n\t// \t\t\t\t\t\t\t\t\t\t\t\t.instrumentDropdownOpen\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t\ttoggle={() =>\n\t// \t\t\t\t\t\t\t\t\t\t\tthis.onInstrumentChange()\n\t// \t\t\t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\t\t<DropdownToggle caret>\n\t// \t\t\t\t\t\t\t\t\t\t\t{this.state.instrument}\n\t// \t\t\t\t\t\t\t\t\t\t</DropdownToggle>\n\t// \t\t\t\t\t\t\t\t\t\t<DropdownMenu>\n\t// \t\t\t\t\t\t\t\t\t\t\t<DropdownItem\n\t// \t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\tthis.onInstrumentSelect(\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t\tavailableInstruments.tabla\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t// \t\t\t\t\t\t\t\t\t\t\t\t}}\n\t// \t\t\t\t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\t\t\t\tTabla\n\t// \t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\n\t// \t\t\t\t\t\t\t\t\t\t\t<DropdownItem\n\t// \t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\tthis.onInstrumentSelect(\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t\tavailableInstruments.electro\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t// \t\t\t\t\t\t\t\t\t\t\t\t}}\n\t// \t\t\t\t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\t\t\t\tElectro\n\t// \t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\n\t// \t\t\t\t\t\t\t\t\t\t</DropdownMenu>\n\t// \t\t\t\t\t\t\t\t\t</ButtonDropdown>\n\t// \t\t\t\t\t\t\t\t</Col>\n\t// \t\t\t\t\t\t\t</Row>\n\t// \t\t\t\t\t\t</Container>\n\t// \t\t\t\t\t</Col>\n\t// \t\t\t\t\t<Col xs={3}>\n\t// \t\t\t\t\t\t{/* here goes the plan view */}\n\t// \t\t\t\t\t\t<Badge color=\"info\">\n\t// \t\t\t\t\t\t\tCurrent BPM:\n\t// \t\t\t\t\t\t\t<span ref=\"currentBpmBadge\">\n\t// \t\t\t\t\t\t\t\t{this.state.currentBpm.toFixed(0)}\n\t// \t\t\t\t\t\t\t</span>\n\t// \t\t\t\t\t\t</Badge>\n\t// \t\t\t\t\t\t<Planner\n\t// \t\t\t\t\t\t\tconstantMode={this.state.constantMode}\n\t// \t\t\t\t\t\t\tonChange={() => this.onPlanChanged()}\n\t// \t\t\t\t\t\t\tref=\"planner\"\n\t// \t\t\t\t\t\t/>\n\t// \t\t\t\t\t</Col>\n\t// \t\t\t\t</Row>\n\t// \t\t\t</Container>\n\t// \t\t\t{/* <div ref='settingsContainer'  style={{'fontFamily': 'courier'}} > */}\n\t// \t\t</div>\n\t// \t);\n  // }\n  \n  totalStepsChanged = () => {    \n\t\tconst s = this.getUiState();\n\t\tif (s.totalSteps !== this.state.totalSteps) {\n\t\t\tthis.refs.planner.setPlan(this.makePlan(s));\n\t\t}\n\t}\n\n\tonBeatsPerStepChange = () => {\n\t\t// plan doesn't change here, just the beats per step amount\n\t\t// console.log(\"<App>onBeatsPerStepChange\")\n\t\tconst s = this.getUiState();\n\t\t// debugger\n\t\t// update barManager with newMeasureSetting\n\t\tif (s.beatsPerStep !== this.refs.sm.beatsPerStep) {\n\t\t\tthis.refs.barManager.setBarsAmount(s.beatsPerStep);\n\t\t\tthis.refs.sm.setBeatsPerStep(s.beatsPerStep);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tonBpmRangeChange() {\n\t\tconst s = this.getUiState();\n\t\tif (s.bpmRange[0] !== this.state.bpmRange[0] || s.bpmRange[1] !== this.state.bpmRange[1]) {\n\t\t\tconsole.log('bpm range changed')\n\t\t\n\t\t\tconsole.log(s, this.state)\n\t\t\tthis.setState({bpmRange: s.bpmRange});\n\t\t\n\t\t\tthis.refs.planner.setPlan(this.makePlan(s));\n\t\t}\n\t\t\n\t}\n\t\n\texerciseDurationChanged = () => {\n\t\t// make and execute new plan\n\t\tlet newPlan = this.makePlan(this.getUiState());\n\t\tthis.refs.planner.setPlan(newPlan);\n\t\t// this.refs.planner.start();\n\n\t}\n\n\tonPlanAdvanced = (newStep) => {\n\t\tif (newStep) {\n\t\tconsole.log('<App>plan advanced, setting new bpm', newStep.bpm)\n\t\t\tthis.setBpm(newStep.bpm);\n\t\t}\n\t\telse {\n\t\t\t// no step so just stop planner and transport\n\t\t\tthis.refs.planner.stop();\n\t\t\tthis.refs.sm.stop();\n\t\t}\n\t}\n\n\tsetBpm = (newBpm) => {\n\t\tthis.setState({ currentBpm: newBpm });\n\t \tthis.refs.sm.setBpm(newBpm);\n\t}\n\n\tonPlanChanged = () => {\n\t\tconsole.log(\"<App>onPlanChanged\");\n\n\t\t// this.refs.planner.start();\n\t\tlet bar = this.refs.planner.getCurrentBar() \n\t\tconsole.log(\"<App>currentBar\", bar)\n\t\tconsole.log(\"<App>isPlaying?\", this.refs.sm.state.isPlaying )\n\t\t\n\t\t// set initial speed\n\t\tif (bar) {\n\t\t\tthis.setBpm(bar.bpm);\n\t\t}\n\t\t\n\t\tif (this.refs.sm.state.isPlaying ) {\n\t\t\tthis.refs.planner.start();\n\t\t}\n  };\n  \n  onInstrumentChange() {\n\t\tthis.setState(prevState => ({\n\t\t\tinstrumentDropdownOpen: !prevState.instrumentDropdownOpen\n\t\t}));\n  }\n  \n  onCycleLockChange() {\n    this.setState(prevState => ({\n\t\t\tcycleDropdownOpen: !prevState.cycleDropdownOpen\n\t\t}));\n  }\n\n\thandleStartStop = () => {\n\t\t// if stop then stop \n\t\tconsole.log(\"<App>handleStartStop, isPlaying=\",this.refs.sm.state.isPlaying )\n\t\tif (this.refs.sm.state.isPlaying === true) {\n\n\t\t\tthis.refs.planner.stop();\n\t\t\tthis.refs.sm.stop();\n\t\t\t// reset bpm\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\tthis.refs.planner.start();\n\t\t\tthis.refs.sm.start();\n\t\t}\n\t}\n\n\n\n\tgetUiState() {\n\t\tvar s = {\n\t\t\t//currentBpm: this.refs.sm.getBpm(),\n\t\t\tbpmRange: this.refs.bpmRange.getValue(),\n//\t\t\tsegmentDuration: this.refs.segmentDuration.getValue(),\n\t\t\texerciseDuration: this.refs.exerciseDuration.getValue(),\n\t\t\ttotalSteps: this.refs.totalSteps.getValue(),\n\t\t\tbeatsPerStep: this.refs.beatsPerStep.getValue()\n\t\t};\n\t\treturn s;\n\t}\n\n\tonAccentsChange() {\n\t\tconst accents =  this.refs.barManager.getValue();\n\n\t\t// set new amount\n\n\t\t// set accents\n\t\tthis.refs.sm.setAccents(accents);\n\t\t// set new bps, it will trigger restart too\n\t\t// this.refs.sm.setBeatsPerStep(accents.length)\n\t}\n\n\n\n\t// segmentDurationChanged() {\n\t// \tconsole.log(\"segmentDurationChanged\");\n\t// \tconst s = this.getUiState();\n\n\t// \tconst newSegmentDuration = s.segmentDuration;\n\t// \tlet newtotalSteps = Math.floor(\n\t// \t\t(s.exerciseDuration * 60) / s.segmentDuration\n\t// \t);\n\t// \tthis.refs.totalSteps.setState({ value: newtotalSteps });\n\n\t// \t// construct new plan of excercise\n\t// \tvar min = s.bpmRange[0];\n\t// \tvar max = s.bpmRange[1];\n\n\t// \tvar deltaBpm = (max - min) / newtotalSteps;\n\t// \t//console.log('deltaBpm',deltaBpm)\n\t// \t// define new plan\n\t// \tvar planner = this.refs.planner;\n\t// \tvar segments = [];\n\t// \tfor (var i = 0; i <= newtotalSteps; i++) {\n\t// \t\tsegments.push({\n\t// \t\t\ttime: i * newSegmentDuration,\n\t// \t\t\tbpm: min + i * deltaBpm\n\t// \t\t});\n\t// \t}\n\t// \tplanner.setPlan(segments);\n\t// \tthis.refs.sm.setBpm(s.bpmRange[0]);\n\n\t// \t// if (this.state.isPlaying) {\n\t// \t//   console.log('it is playing so plan is not executed yet')\n\t// \t// }\n\t// }\n\n\tmakePlan(s) {\n\t\t\n\t\t// construct new plan of excercise\n\t\tconst min = s.bpmRange[0];\n\t\tconst max = s.bpmRange[1];\n\n    const deltaBpm = (max - min) / s.totalSteps;\n    const segmentDuration = (s.exerciseDuration * 60) / (s.totalSteps + 1);\n\t\tconsole.log(\"<App>makePlan, excerciseDuration:\", s.exerciseDuration)\n    // define new plan\n\t\tvar segments = [];\n\t\tfor (var i = 0; i <= s.totalSteps; i++) {\n\t\t\tsegments.push({\n\t\t\t\ttime:   i * segmentDuration,\n\t\t\t\tstart: i * segmentDuration,\n\t\t\t\tend: i * segmentDuration + segmentDuration,\n\t\t\t\tbpm:    min + i * deltaBpm\n\t\t\t});\n\t\t}\n\t\treturn segments;\n\t}\n\n\t// settingsChanged(el) {\n\t// \tdebugger\n\t// \t//console.log('settings Changed',el);\n\t// \tconst s = this.getUiState();\n\n\t// \tlet newSegmentDuration = s.segmentDuration;\n\t// \tlet newExerciseDuration = s.exerciseDuration * 60;\n\t// \tlet newtotalSteps = s.totalSteps;\n\t// \tlet newBeatsPerStep = s.beatsPerStep;\n\n\t// \t// if segment duration changed then determine how many bars\n\t// \tif (el === this.uiElements.segmentDuration) {\n\t// \t\tnewtotalSteps = Math.floor(\n\t// \t\t\t(s.exerciseDuration * 60) / s.segmentDuration\n\t// \t\t);\n\t// \t\tthis.refs.totalSteps.setState({ value: newtotalSteps });\n\t// \t}\n\t// \tif (\n\t// \t\tel === this.uiElements.totalSteps ||\n\t// \t\tel === this.uiElements.exerciseDuration\n\t// \t) {\n\n  //     debugger\n\n\t// \t\tnewSegmentDuration = Math.floor(\n\t// \t\t\t(s.exerciseDuration * 60) / s.totalSteps\n\t// \t\t);\n\t// \t\tthis.refs.segmentDuration.setState({ value: newSegmentDuration });\n\t// \t\t// console.log('newSegmentDuration',newSegmentDuration)\n\t// \t}\n\n\t// \tthis.segmentDurationChanged();\n\n \n\t// \tthis.setState({\n\t// \t\tcurrentBpm: s.bpmRange[0],\n\t// \t\tbpmRange: s.bpmRange,\n\t// \t\texerciseDuration: newExerciseDuration,\n\t// \t\tsegmentDuration: newSegmentDuration,\n\t// \t\ttotalSteps: newtotalSteps,\n\t// \t\tbeatsPerStep: newBeatsPerStep\n\t// \t});\n\n\t// \tthis.refs.sm.setBeatsPerStep(newBeatsPerStep);\n\t// \tthis.refs.sm.setBpm(s.bpmRange[0]);\n\n\t// \t// update barManager with newMeasureSetting\n\t// \tthis.refs.barManager.setBarsAmount(newBeatsPerStep);\n\t// }\n\n// \tstartTimer(time, callback) {\n// \t\treturn\n// \t\tconsole.log(\"startTimer()\");\n// \t\t// make sure we dispose any timer that's currently set\n// \t\tif (this.timer.ref) {\n// \t\t\tconsole.log(\"startTimer() old timer disposed\");\n// \t\t\tclearInterval(this.timer.ref);\n// \t\t\tthis.timer.ref = undefined;\n// \t\t\tthis.timer.startTime = null;\n// \t\t\tthis.refs.planner.resetStep();\n// \t\t}\n\n// \t\tthis.timer = {\n// \t\t\tref: setInterval(callback, time),\n// \t\t\tstartTime: new Date()\n// \t\t};\n// \t}\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App  /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}