{"version":3,"sources":["components/SoundMachine.jsx","components/Planner.jsx","components/AdvancedSlider.jsx","components/AdvancedRange.jsx","components/BarManager.jsx","App.js","serviceWorker.js","index.js"],"names":["SoundMachine","instrumentTypes","TABLA","ELECTRO","SYNTH","state","instrument","_this","measuresPerBar","samples","instruments","accents","setBpm","bpm","Tone","Transport","value","setMeasuresPerBar","setState","setTransport","transportState","console","log","stop","cancel","accentFunc","bind","Object","assertThisInitialized","tickFunc","Error","i","indexOf","schedule","Time","timeSignature","loop","loopEnd","start","getBpm","Synth","toMaster","triggerAttackRelease","Buffer","on","this","tablaSampler","Sampler","C3","C4","baseUrl","release","triggerAttack","electricSampler","context","latencyHint","accentIdxArray","react_default","a","createElement","isPlaying","toggle","Component","Planner","currentStep","bars","stepsCounter","barRender","b","cls","step","className","key","formattedTime","toFixed","time","bar","formatTime","prevState","concat","toConsumableArray","length","getCurrentStep","t","timeInSeconds","Date","setSeconds","padTime","getMinutes","getSeconds","_this2","Alert","variant","style","fontFamily","fontSize","map","AdvancedSlider","get","getPrototypeOf","prototype","call","Badge","ref","onClick","onBadgeClick","Slider","AdvancedRange","bounds","Range","BarManager","props","classCallCheck","possibleConstructorReturn","accentBars","renderCells","Button","color","handleCellClick","active","includes","prepareBars","defaultValue","amount","push","selected","index","splice","onAfterChange","ButtonGroup","App","lockType","SEGMENT","STEP","uiElements","segmentDuration","exerciseDuration","totalBars","bpmRange","currentBpm","lockTo","timers","handleStartStop","refs","sm","setNewSpeed","planner","advanceStep","newBpm","getCurrentBar","clearTimeout","pop","components_SoundMachine","Container","Row","Col","xs","components_AdvancedRange","min","max","pushable","settingsChanged","components_AdvancedSlider","components_BarManager","components_Planner","getValue","el","s","getUiState","newSegmentDuration","newExerciseDuration","newTotalBars","newMeasuresPerBar","Math","floor","deltaBpm","clear","addBar","clearInterval","newSpeed","setInterval","barManager","setBarsAmount","getAccentBars","setAccents","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c40fe320.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Tone from 'tone';\r\n\r\n\r\nclass SoundMachine extends Component {\r\n    instrumentTypes = {\r\n        TABLA: 'tabla',\r\n        ELECTRO: 'electro',\r\n        SYNTH: 'synth'\r\n    }\r\n    \r\n    state = { \r\n         //isInitialized: false,\r\n        instrument: this.instrumentTypes.TABLA,\r\n        measuresPerBar: 3\r\n     }\r\n    \r\n    samples = {}\r\n\r\n    instruments = {}\r\n\r\n    accents = [0]\r\n \r\n    componentDidMount() {\r\n        // reload/debug bell\r\n        var synth = new Tone.Synth().toMaster();\r\n        synth.triggerAttackRelease('A2');\r\n\r\n    \r\n        Tone.Buffer.on(\"load\", this.setTransport)\r\n\r\n        // init tabla sampler\r\n        this.tablaSampler = new Tone.Sampler({\r\n            \"C3\" : \"Tha.wav\",\r\n            \"C4\" : \"Tin.wav\"            \r\n        }, {\r\n            baseUrl: './audio/',\r\n            release: 1\r\n        }).toMaster();\r\n\r\n        this.instruments[this.instrumentTypes.TABLA] = this.tablaSampler;\r\n        this.instruments[this.instrumentTypes.TABLA].accentFunc = function() {this.tablaSampler.triggerAttack('C3')};\r\n        this.instruments[this.instrumentTypes.TABLA].tickFunc = function() {this.tablaSampler.triggerAttack('C4')};\r\n\r\n        this.electricSampler = new Tone.Sampler({\r\n            \"C3\" : \"electronicKick.mp3\",\r\n            \"C4\" : \"electronicHat.wav\"\r\n        }, {\r\n            baseUrl: './audio/',\r\n            release: 0.1\r\n        }).toMaster();\r\n\r\n        this.instruments[this.instrumentTypes.ELECTRO] = this.electricSampler;\r\n        this.instruments[this.instrumentTypes.ELECTRO].accentFunc = function() {this.electricSampler.triggerAttack('C4')};\r\n        this.instruments[this.instrumentTypes.ELECTRO].tickFunc = function() {this.electricSampler.triggerAttack('C3')};\r\n         \r\n        // lowest latency  TODO: not sure what this does\r\n        Tone.context.latencyHint = 'fastest'\r\n        //this.setState({isInitialized: true});\r\n        console.log('Sound machine mounted');        \r\n    }\r\n\r\n    setBpm = (bpm) => {\r\n        // console.log('<SoundMachine>setBpm', bpm);\r\n        Tone.Transport.bpm.value = bpm;\r\n    }\r\n\r\n    setMeasuresPerBar = (measuresPerBar) => {\r\n        this.setState({'measuresPerBar': measuresPerBar});\r\n        // bar modification require reseting transport\r\n        \r\n        this.setTransport();\r\n    }\r\n\r\n    setTransport = () => {\r\n        // store whether we're on or off at this point to set it at the end of this method\r\n        const transportState = Tone.Transport.state;\r\n        console.log('transportState',transportState)\r\n        // stop\r\n        Tone.Transport.stop();\r\n        // reset transport\r\n        Tone.Transport.cancel();\r\n\r\n        // current instrument attach/tick\r\n        var accentFunc = this.instruments[this.state.instrument].accentFunc.bind(this);\r\n        var tickFunc = this.instruments[this.state.instrument].tickFunc.bind(this);\r\n        \r\n        console.log('scheduling new pattern with ', this.state.measuresPerBar, 'ticks per bar')\r\n        if (this.state.instrument !== this.instrumentTypes.SYNTH) {\r\n            for (var i = 0 ; i < this.state.measuresPerBar ; i++) {\r\n                if (this.accents.indexOf(i) >= 0)\r\n                    Tone.Transport.schedule(accentFunc, Tone.Time('0:' + i));\r\n                else \r\n                    Tone.Transport.schedule(tickFunc, Tone.Time('0:' + i));\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('not implemented')\r\n        }\r\n       \r\n        Tone.Transport.timeSignature = [this.state.measuresPerBar, 4];\r\n        Tone.Transport.loop = true;\r\n        Tone.Transport.loopEnd = '1m'\r\n\r\n        if (transportState === 'started') {\r\n            Tone.Transport.start();\r\n        }\r\n    }\r\n\r\n    setAccents(accentIdxArray) {\r\n        this.accents = accentIdxArray;\r\n        this.setTransport();\r\n    }\r\n\r\n    render() {\r\n        return (<div>Sound is {this.state.isPlaying}</div>);\r\n    }\r\n\r\n \r\n    toggle() {        \r\n        Tone.Transport.toggle()\r\n    }\r\n    \r\n    getBpm = () => {\r\n        return(Tone.Transport.bpm.value);\r\n    }\r\n}\r\n \r\nexport default SoundMachine;","import React, {Component} from 'react'\r\nimport {Alert, Badge} from 'reactstrap'\r\n\r\nclass Planner extends Component {\r\n    \r\n\r\n    state = {\r\n         currentStep: 0,\r\n         bars: [],\r\n    }\r\n    stepsCounter = 0\r\n\r\n    addBar(time, bpm) {\r\n        var bar = {\r\n            time: time,\r\n            formattedTime: this.formatTime(time),\r\n            bpm: bpm,\r\n            step: this.stepsCounter++\r\n        };\r\n\r\n        this.setState(prevState => ({\r\n                bars: [...prevState.bars, bar]}\r\n            )\r\n        );\r\n    }\r\n\r\n    clear() {\r\n        this.stepsCounter = 0;\r\n        this.setState({bars: [], currentStep: 0});\r\n    }\r\n\r\n    advanceStep() {\r\n        var currentStep = this.state.currentStep;\r\n\r\n        // check if we're not at the end of plan\r\n        if (currentStep + 1 >= this.state.bars.length) {\r\n            return  null;\r\n        }\r\n\r\n        // console.log('advancing step to' , currentStep + 1)\r\n        this.setState({currentStep: currentStep + 1});\r\n        // console.log('returning' , this.state.currentStep)\r\n        return this.state.currentStep;\r\n    }\r\n    getCurrentBar() {\r\n        if (this.state.getCurrentStep >= this.state.bars.length) {\r\n            throw new Error('we are fcked');\r\n        }\r\n        return this.state.bars[this.state.currentStep];\r\n    }\r\n\r\n    padTime(t) {\r\n        return t<10 ? '0'+t : t;\r\n    }\r\n    formatTime(timeInSeconds) {\r\n        //{this.leadingZeroCheck(now.getMinutes())}:{now.getSeconds()} -- \r\n        var t = new Date(0,0,0,0,0,0,0);\r\n        t.setSeconds(timeInSeconds)\r\n        var s = this.padTime(t.getMinutes()) + ':' + this.padTime(t.getSeconds())\r\n        return s;\r\n    }\r\n\r\n    barRender = (b) => {\r\n        let cls = 'badge badge-pill badge-' + (this.state.currentStep === b.step ? 'primary' : 'secondary');\r\n        return (<div className={cls} key={\"key_\"+b.bpm}>\r\n            {b.formattedTime} -- {b.bpm.toFixed(2)}\r\n        </div>);\r\n    }\r\n    \r\n    render() {\r\n        // don't doo much if no plan yet\r\n        if (this.state.bars.length === 0) {\r\n            return (<Alert variant=\"warning\">No plan</Alert>);\r\n        }\r\n\r\n\r\n        //console.log('rendering plan with ', this.state.bars.length, 'length')\r\n        return (<Alert variant=\"success\">\r\n           <p style={{fontFamily: 'courier', fontSize: '0.5rem'}}><code>{this.state.bars.map(bar => this.barRender(bar))}</code></p>\r\n        </Alert>)\r\n        \r\n    }\r\n}\r\n \r\nexport default Planner;","import React from 'react'\r\nimport Slider from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n// import {Container, Row, Col} from 'reactstrap'\r\n\r\nclass AdvancedSlider extends Slider {\r\n \r\n    // constructor(props) {\r\n    //     super(props)\r\n    //     // if (props.renderVal) {\r\n    //     //     this.renderVal = props.renderVal\r\n    //     // }\r\n    \r\n    // }\r\n    render() { \r\n        return (\r\n            <div>\r\n                {super.render()}\r\n                <div><Badge  ref=\"valueBadge\" onClick={this.onBadgeClick} className=\"d-i\">{this.state.value}</Badge></div>\r\n            </div>\r\n            );\r\n    }\r\n\r\n    onBadgeClick() {\r\n        // attach editorInPlace\r\n    }\r\n \r\n}\r\n\r\nexport default AdvancedSlider\r\n","import React from 'react'\r\nimport { Range } from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n\r\nclass AdvancedRange extends Range {\r\n    render() { \r\n        return (<div>\r\n            {super.render()}\r\n            <Badge onClick={this.onBadgeClick} className=\"d-i\">{this.state.bounds[0]} - {this.state.bounds[1]}</Badge>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default AdvancedRange;\r\n","import React, { Component } from 'react';\r\nimport {Button, ButtonGroup} from 'reactstrap'\r\n  \r\n\r\nclass BarManager extends Component {\r\n    state = { \r\n        bars: [],\r\n        accentBars: []\r\n    }\r\n    constructor(props)  {\r\n        super(props);\r\n       this.state.bars = this.prepareBars(props.defaultValue);\r\n    }\r\n\r\n    prepareBars(amount) {\r\n        var bars = [];\r\n        for (var i = 0 ; i < amount; i++) {\r\n            bars.push(i);\r\n        }\r\n        return bars;\r\n    }\r\n\r\n    setBarsAmount(amount : Integer) {\r\n       var bars = this.prepareBars(amount);\r\n        this.setState({bars: [...bars]})\r\n    }\r\n    \r\n    handleCellClick(selected) {\r\n        const index = this.state.accentBars.indexOf(selected);\r\n        if (index < 0) {\r\n            this.state.accentBars.push(selected);\r\n        } else {\r\n            this.state.accentBars.splice(index, 1);\r\n        } \r\n        this.setState({ accentBars: [...this.state.accentBars] });\r\n        \r\n        //dispatchEvent(new Event('click'))\r\n\r\n        //etInterval(() => this.nv.dispatchEvent(new CustomEvent(\"nv-enter\", { detail: new Date() })), 1000);\r\n    }\r\n\r\n \r\n    getAccentBars() {\r\n        return this.state.accentBars\r\n    }\r\n    renderCells = (bars) => {\r\n        return (\r\n            bars.map(\r\n                bar => (\r\n                    <Button  color=\"primary\"  onClick={() => this.handleCellClick(bar)}  active={this.state.accentBars.includes(bar)}>X</Button>)\r\n            )\r\n        );\r\n    }\r\n\r\n    render() { \r\n        // dunno how this works but it does the job bubbling up the click event\r\n        const { onAfterChange } = this.props;\r\n        \r\n        return (\r\n            <ButtonGroup onClick={onAfterChange}>\r\n                {this.renderCells(this.state.bars)}\r\n            </ButtonGroup>\r\n        )\r\n    }\r\n\r\n}\r\n \r\nexport default BarManager;","import React, { Component } from 'react';\nimport './App.css';\nimport './components/SoundMachine';\nimport SoundMachine from './components/SoundMachine';\nimport Planner from './components/Planner';\n// import Slider, {Range} from 'rc-slider';\n\nimport 'rc-slider/assets/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {Container, Row, Col, Button, Badge} from 'reactstrap'\n\nimport AdvancedSlider from './components/AdvancedSlider';\nimport AdvancedRange from './components/AdvancedRange';\nimport BarManager from './components/BarManager';\n// import {AdvancedSlider, AdvancedRange} from './components/LabelSlider';\n\nclass App extends Component {\n    // based on this value we will wait till segment or steps are finished to advance speed\n    lockType = {\n        SEGMENT: 'segment',\n        STEP: 'step'\n    };\n    \n    uiElements = {\n        segmentDuration: 'segment_duration',\n        exerciseDuration: 'exercise_duration',\n        totalBars: 'total_bars'\n    }\n\n    state = {\n        bpmRange: [100,300],\n        exerciseDuration: 2*60, // 10 minutes\n        segmentDuration: 5, // 5 seconds\n        totalBars: 24,  // exerciseDuration / segmentDuration\n        measuresPerBar: 3,\n        currentBpm: 100,\n        lockTo: this.lockType.SEGMENT\n    }\n    \n    timers = []\n\n    render() {\n        return ( \n            <div className = \"App\">\n                <SoundMachine ref=\"sm\"/>\n                <Button onClick = {() => this.handleStartStop() } > Start / Stop </Button>  \n                {/* <button onClick = {() => this.handleSpeedChange(20) } > Speed Up </button>  \n                <button onClick = {() => this.handleSpeedChange(-20) } > SPeed Down </button>  */}\n                <Container> \n                    <Row>\n                        <Col>\n                        {/* here goes sliders */}\n                            <Container >\n                                <Row className='p-2'>\n                                    <Col xs={5} className='badge badge-primary '>\n                                        BPM Range\n                                    </Col>\n                                    <Col>\n                                        <AdvancedRange ref=\"bpmRange\" min={30} max={400} defaultValue={[this.state.bpmRange[0],this.state.bpmRange[1]]} pushable={true} onAfterChange={() => this.settingsChanged()}  />\n                                    </Col>\n                                </Row>\n                                <Row className='p-2'>\n                                    <Col xs={5} className='badge badge-primary'>\n                                        Segment Duration (s)\n                                    </Col>\n                                    <Col>\n                                        <AdvancedSlider ref=\"segmentDuration\" min={1} max={120} defaultValue={this.state.segmentDuration} onAfterChange={() => this.settingsChanged(this.uiElements.segmentDuration)}/>\n                                    </Col>\n                                </Row>\n                                <Row className='p-2'>\n                                    <Col xs={5} className='badge badge-primary'>\n                                        Total time (min)\n                                    </Col>\n                                    <Col>\n                                        <AdvancedSlider ref=\"exerciseDuration\" min={1} max={30} defaultValue={this.state.exerciseDuration/60} onAfterChange={() => this.settingsChanged(this.uiElements.exerciseDuration)} />\n                                    </Col>\n                                </Row>\n                                <Row className='p-2'>\n                                    <Col xs={5} className='badge badge-primary'>\n                                    Bars\n                                    </Col>\n                                    <Col>\n                                        <AdvancedSlider ref=\"totalBars\" min={1} max={50} defaultValue={this.state.totalBars} onAfterChange={() => this.settingsChanged(this.uiElements.totalBars)}/>\n                                    </Col>\n                                </Row>\n                                <Row className='p-2'>\n                                    <Col xs={5} className='badge badge-primary'>\n                                    Measures per Bar\n                                    </Col>\n                                    <Col>\n                                        <AdvancedSlider ref=\"measuresPerBar\" min={2} max={16} defaultValue={this.state.measuresPerBar} onAfterChange={() => this.settingsChanged()}/>\n                                    </Col>\n                                </Row>\n                                <Row className='p-2'>\n                                    <Col xs={5} className='badge badge-primary'>\n                                    Bar Manager\n                                    </Col>\n                                    <Col>\n                                        <BarManager onAfterChange={() => this.settingsChanged('barManager')} ref=\"barManager\" defaultValue={this.state.measuresPerBar} />\n                                    </Col>\n                                </Row>\n                            </Container>    \n                        </Col>\n                        <Col xs={3}>\n                            {/* here goes the plan view */}\n                            <Badge color=\"info\">Current BPM: <span  ref=\"currentBpmBadge\">{this.state.currentBpm.toFixed(0)}</span></Badge>\n                            <Planner lockTo={this.state.lockTo} ref=\"planner\" />\n                        </Col>\n                    </Row>\n                </Container>\n                \n                \n                \n                {/* <div ref='settingsContainer'  style={{'fontFamily': 'courier'}} > */}\n                    \n                \n            </div >\n        );\n    }\n\n    handleStartStop = () => {\n        // play/stop\n        this.refs.sm.toggle();\n    }\n\n    \n    getUiState() {\n        var s = {\n            currentBpm: this.refs.sm.getBpm(),\n            bpmRange: this.refs.bpmRange.getValue(),\n            segmentDuration:  this.refs.segmentDuration.getValue(),\n            exerciseDuration: this.refs.exerciseDuration.getValue(),\n            totalBars:  this.refs.totalBars.getValue(),\n            measuresPerBar: this.refs.measuresPerBar.getValue()\n        };\n        return s;\n    }\n\n    settingsChanged(el) {\n        \n        //console.log('settings Changed',el);\n        const s = this.getUiState();      \n\n        let newSegmentDuration = s.segmentDuration;\n        let newExerciseDuration = s.exerciseDuration * 60;\n        let newTotalBars = s.totalBars;\n        let newMeasuresPerBar = s.measuresPerBar;\n        \n        // if segment duration changed then determine how many bars \n        if (el === this.uiElements.segmentDuration)\n        {\n            newTotalBars = Math.floor(s.exerciseDuration * 60 / s.segmentDuration);\n            this.refs.totalBars.setState({value: newTotalBars})\n            // console.log('newTotalBars',newTotalBars)\n        }\n        if (el === this.uiElements.totalBars || el === this.uiElements.exerciseDuration) {\n            newSegmentDuration = Math.floor( s.exerciseDuration * 60 / s.totalBars );\n            this.refs.segmentDuration.setState({value: newSegmentDuration})\n            // console.log('newSegmentDuration',newSegmentDuration)\n        }\n\n        // construct new plan of excercise\n        var min = s.bpmRange[0];\n        var max = s.bpmRange[1];\n   \n         var deltaBpm = (max - min) / newTotalBars;\n         //console.log('deltaBpm',deltaBpm)\n         // define new plan\n         var planner = this.refs.planner;\n         planner.clear();\n         for (var i = 0 ; i <= newTotalBars ; i++)\n         {\n             planner.addBar(i * newSegmentDuration, min + i * deltaBpm);\n         }\n         \n         // clear all timers\n         while(this.timers.length > 0){\n             clearInterval(this.timers.pop());\n         }\n \n         // bind context to setNewSpeed func\n         var newSpeed = this.setNewSpeed.bind(this)\n         // execute newSpeed at specific time\n         this.timers.push( \n             setInterval(newSpeed, this.state.segmentDuration * 1000 )\n         );\n\n        //  console.log('timer count', this.timers.length, newTotalBars);\n \n       \n        this.setState({\n            currentBpm: (s.bpmRange[0]),\n            bpmRange: s.bpmRange,\n            exerciseDuration: newExerciseDuration,\n            segmentDuration: newSegmentDuration,\n            totalBars: newTotalBars,\n            measuresPerBar: newMeasuresPerBar\n        });\n\n        this.refs.sm.setMeasuresPerBar(newMeasuresPerBar);\n        this.refs.sm.setBpm(s.bpmRange[0]);\n        \n        // update barManager with newMeasureSetting\n        this.refs.barManager.setBarsAmount(newMeasuresPerBar)\n        var accentBars = this.refs.barManager.getAccentBars();\n        this.refs.sm.setAccents(accentBars);\n    }\n\n\n    setNewSpeed = () => {\n        var planner = this.refs.planner;\n        // preincrement as usually the first step is already set\n        var step = planner.advanceStep();\n    \n        // if no step that meanst it's over, so clear plan\n        if (!step) {\n            clearTimeout(this.timers.pop());\n            return;\n        }\n\n        var newBpm = planner.getCurrentBar().bpm;\n        // set new bpm\n        this.setState({currentBpm: newBpm});\n        this.refs.sm.setBpm(newBpm);\n    }\n\n    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}