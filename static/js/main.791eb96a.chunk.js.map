{"version":3,"sources":["components/SoundMachineInstrument.jsx","components/SoundMachine.jsx","components/Planner.jsx","components/AdvancedSlider.jsx","components/AdvancedRange.jsx","components/BarManager.jsx","App.js","serviceWorker.js","index.js"],"names":["SoundMachineInstrument","props","Object","classCallCheck","this","o","C3","accent","C4","tick","possibleConstructorReturn","getPrototypeOf","call","baseUrl","Sampler","SoundMachine","instrumentTypes","TABLA","ELECTRO","SYNTH","tickNote","accentNote","state","instrument","_this","measuresPerBar","isPlaying","samples","instruments","accents","part","setBpm","bpm","Tone","Transport","value","setMeasuresPerBar","setState","restart","sampler","stop","removeAll","undefined","score","i","push","indexOf","Part","time","note","triggerAttackRelease","timeSignature","loopEnd","loop","start","getBpm","Synth","toMaster","Buffer","on","tabla","key","electro","context","latencyHint","instrumentKey","accentIdxArray","length","at","react_default","a","createElement","Component","Planner","currentStep","bars","stepsCounter","planChanged","onChange","console","log","barRender","b","cls","step","className","formattedTime","toFixed","plan","bar","formatTime","prevState","getCurrentStep","Error","t","timeInSeconds","Date","setSeconds","padTime","getMinutes","getSeconds","_this2","Alert","variant","style","fontSize","map","AdvancedSlider","get","prototype","Badge","onClick","onBadgeClick","Slider","AdvancedRange","bounds","Range","BarManager","accentBars","renderCells","Button","color","handleCellClick","active","includes","prepareBars","defaultValue","amount","toConsumableArray","selected","index","splice","onAfterChange","ButtonGroup","availableInstruments","App","timer","timerRef","startTime","lockType","SEGMENT","STEP","uiElements","segmentDuration","exerciseDuration","totalBars","bpmRange","currentBpm","instrumentDropdownOpen","onPlanChanged","refs","sm","setNewSpeed","bind","assertThisInitialized","getValue","startTimer","handleStartStop","toggle","ref","clearInterval","planner","resetStep","advanceStep","newBpm","getCurrentBar","settingsChanged","newInstrument","setInstrument","components_SoundMachine","Container","Row","Col","xs","components_AdvancedRange","min","max","pushable","components_AdvancedSlider","segmentDurationChanged","components_BarManager","onAccentsChange","ButtonDropdown","isOpen","onInstrumentChange","DropdownToggle","caret","DropdownMenu","DropdownItem","onInstrumentSelect","components_Planner","lockTo","barManager","getAccentBars","setAccents","s","getUiState","newSegmentDuration","newTotalBars","Math","floor","deltaBpm","segments","setPlan","el","newExerciseDuration","newMeasuresPerBar","setBarsAmount","callback","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAgBeA,cAXX,SAAAA,EAAYC,GAAQC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAChB,IAAIK,EAAI,CACJC,GAAOL,EAAMM,OACbC,GAAOP,EAAMQ,MAHF,OAAAP,OAAAQ,EAAA,EAAAR,CAAAE,KAAAF,OAAAS,EAAA,EAAAT,CAAAF,GAAAY,KAAAR,KAKTC,EAAE,CACJQ,QAAS,yCARgBC,WC6HtBC,6MA3HXC,gBAAkB,CACdC,MAAO,QACPC,QAAS,UACTC,MAAO,WAGXC,SAAW,OACXC,WAAa,OAEbC,MAAQ,CAEJC,WAAYC,EAAKR,gBAAgBC,MACjCQ,eAAgB,EAChBC,WAAW,KAGfC,QAAU,KAEVC,YAAc,KAEdC,QAAU,CAAC,KAEXC,KAAO,OAqCPC,OAAS,SAACC,GACNC,IAAKC,UAAUF,IAAIG,MAAQH,KAG/BI,kBAAoB,SAACX,GACjBD,EAAKa,SAAS,CAACZ,eAAkBA,GAAiB,WAAOD,EAAKc,eAGlEA,QAAU,WACN,IAAIC,EAAUf,EAAKI,YAAYJ,EAAKF,MAAMC,YAEtCC,EAAKM,OACLN,EAAKM,KAAKU,OACVhB,EAAKM,KAAKW,YACVjB,EAAKM,UAAOY,GAIhB,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAIA,EAAIpB,EAAKF,MAAMG,eAAiBmB,IAC7CD,EAAME,KAAK,CAAC,KAAKD,EAAGpB,EAAKK,QAAQiB,QAAQF,GAAK,EAAIpB,EAAKJ,SAAWI,EAAKH,aAG3EG,EAAKM,KAAO,IAAIG,IAAKc,KAAK,SAASC,EAAMC,GAErCV,EAAQW,qBAAqBD,EAAM,KAAMD,IAC1CL,GAGHV,IAAKC,UAAUiB,cAAgB,CAAC3B,EAAKF,MAAMG,eAAgB,GAE3DD,EAAKM,KAAKsB,QAAU,KACpB5B,EAAKM,KAAKuB,MAAO,EACjB7B,EAAKM,KAAKwB,WA2BdC,OAAS,WACL,OAAOtB,IAAKC,UAAUF,IAAIG,2FA7Fd,IAAIF,IAAKuB,OAAQC,WACvBP,qBAAqB,MAG3BjB,IAAKyB,OAAOC,GAAG,OAAQvD,KAAKkC,SAG5B,IAAIsB,EAAQ,IAAI5D,EAAuB,CACnC6D,IAAK,QACLtD,OAAQ,UACRE,KAAM,YACPgD,WAEHrD,KAAKwB,YAAYxB,KAAKY,gBAAgBC,OAAS2C,EAE/C,IAAIE,EAAU,IAAI9D,EAAuB,CACrC6D,IAAK,UACLtD,OAAQ,oBACRE,KAAM,uBACPgD,WAEHrD,KAAKwB,YAAYxB,KAAKY,gBAAgBE,SAAW4C,EAEhD7B,IAAK8B,QAAQC,YAAc,iDAKlBC,GAEV7D,KAAKiC,SAAS,CAACd,WAAY0C,GAAgB7D,KAAKkC,4CAuCzC4B,GACP9D,KAAKyB,QAAUqC,EACf,IAAK,IAAItB,EAAI,EAAIA,EAAIxC,KAAK0B,KAAKqC,OAAQvB,IACnCxC,KAAK0B,KAAKsC,GAAG,KAAKxB,EAAGxC,KAAKyB,QAAQiB,QAAQF,GAAK,EAAIxC,KAAKgB,SAAUhB,KAAKiB,6CAK3E,OAAQgD,EAAAC,EAAAC,cAAA,wBAAwC,IAAzBnE,KAAKkB,MAAMI,UAAqB,UAAY,4CAKtC,YAAzBO,IAAKC,UAAUZ,OACflB,KAAKiC,SAAS,CAACX,WAAW,IAC1BO,IAAKC,UAAUM,SAGfpC,KAAKiC,SAAS,CAACX,WAAW,IAC1BO,IAAKC,UAAUoB,MAAM,iBAnHNkB,sBC8GZC,6MA9GbnD,MAAQ,CACNoD,YAAa,EACbC,KAAM,MAERC,aAAe,IAoCfC,YAAc,WACRrD,EAAKvB,MAAM6E,WACbC,QAAQC,IAAI,qBACZxD,EAAKvB,MAAM6E,eAsCfG,UAAY,SAAAC,GACV,IAAIC,EACF,2BACC3D,EAAKF,MAAMoD,cAAgBQ,EAAEE,KAAO,UAAY,aACnD,OACEf,EAAAC,EAAAC,cAAA,QAAMc,UAAWF,EAAKtB,IAAK,OAASqB,EAAElD,KACnCkD,EAAEI,cADL,OACwBJ,EAAElD,IAAIuD,QAAQ,4EAhFlCC,GAGN,IAFA,IAAIb,EAAO,GAEF/B,EAAI,EAAGA,EAAI4C,EAAKrB,OAAQvB,IAAK,CACpC,IAAMI,EAAOwC,EAAK5C,GAAGI,KACfhB,EAAMwD,EAAK5C,GAAGZ,IAEhByD,EAAM,CACRzC,KAAMA,EACNsC,cAAelF,KAAKsF,WAAW1C,GAC/BhB,IAAKA,EACLoD,KAAMhF,KAAKwE,gBAGbD,EAAK9B,KAAK4C,GAIZrF,KAAKwE,aAAe,EAEpBxE,KAAKiC,SAAS,SAAAsD,GAAS,MAAK,CAC1BjB,YAAa,EACbC,KAAMA,KAERvE,KAAKyE,8CAILzE,KAAKwE,aAAe,EACpBxE,KAAKiC,SAAS,CAAEsC,KAAM,GAAID,YAAa,IACvCtE,KAAKyE,kDAWLzE,KAAKiC,SAAS,CAAEqC,YAAa,0CAG7B,IAAIA,EAActE,KAAKkB,MAAMoD,YAG7B,OAAIA,EAAc,GAAKtE,KAAKkB,MAAMqD,KAAKR,OAC9B,MAIT/D,KAAKiC,SAAS,CAAEqC,YAAaA,EAAc,IAEpCtE,KAAKkB,MAAMoD,qDAGlB,GAAItE,KAAKkB,MAAMsE,gBAAkBxF,KAAKkB,MAAMqD,KAAKR,OAC/C,MAAM,IAAI0B,MAAM,gBAElB,OAAOzF,KAAKkB,MAAMqD,KAAKvE,KAAKkB,MAAMoD,6CAG5BoB,GACN,OAAOA,EAAI,GAAK,IAAMA,EAAIA,qCAEjBC,GAET,IAAID,EAAI,IAAIE,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGnC,OAFAF,EAAEG,WAAWF,GACL3F,KAAK8F,QAAQJ,EAAEK,cAAgB,IAAM/F,KAAK8F,QAAQJ,EAAEM,+CAerD,IAAAC,EAAAjG,KAGP,OAFA2E,QAAQC,IAAI,oBAEmB,IAA3B5E,KAAKkB,MAAMqD,KAAKR,OACXE,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,QAAQ,WAAf,WAKPlC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,QAAQ,WACblC,EAAAC,EAAAC,cAAA,OAAKiC,MAAO,CAAEC,SAAU,WACrBrG,KAAKkB,MAAMqD,KAAK+B,IAAI,SAAAjB,GAAG,OAAIY,EAAKpB,UAAUQ,cAxG/BjB,8HC0BPmC,mLAdP,OACItC,EAAAC,EAAAC,cAAA,WAAArE,OAAA0G,EAAA,EAAA1G,QAAAS,EAAA,EAAAT,CAAAyG,EAAAE,WAAA,SAAAzG,MAAAQ,KAAAR,MAEIiE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAQC,QAAS3G,KAAK4G,aAAc3B,UAAU,OAAOjF,KAAKkB,MAAMa,wDAbxD8E,KCQdC,mLAPP,OAAQ7C,EAAAC,EAAAC,cAAA,WAAArE,OAAA0G,EAAA,EAAA1G,QAAAS,EAAA,EAAAT,CAAAgH,EAAAL,WAAA,SAAAzG,MAAAQ,KAAAR,MAEJiE,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,QAAS3G,KAAK4G,aAAc3B,UAAU,OAAOjF,KAAKkB,MAAM6F,OAAO,GAAtE,MAA6E/G,KAAKkB,MAAM6F,OAAO,YAJ/EC,sBC4DbC,cAxDd,SAAAA,EAAYpH,GAAO,IAAAuB,EAAA,OAAAtB,OAAAC,EAAA,EAAAD,CAAAE,KAAAiH,IAClB7F,EAAAtB,OAAAQ,EAAA,EAAAR,CAAAE,KAAAF,OAAAS,EAAA,EAAAT,CAAAmH,GAAAzG,KAAAR,KAAMH,KALPqB,MAAQ,CACPqD,KAAM,GACN2C,WAAY,CAAC,IAEK9F,EA+BnB+F,YAAc,SAAA5C,GACb,OAAOA,EAAK+B,IAAI,SAAAjB,GAAG,OAClBpB,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACCC,MAAM,UACN5D,IAAK4B,EACLsB,QAAS,kBAAMvF,EAAKkG,gBAAgBjC,IACpCkC,QAASnG,EAAKF,MAAMgG,WAAWM,SAASnC,IAEvCA,EAAM,MArCTjE,EAAKF,MAAMqD,KAAOnD,EAAKqG,YAAY5H,EAAM6H,cAFvBtG,2EAKPuG,GAEX,IADA,IAAIpD,EAAO,GACF/B,EAAI,EAAGA,EAAImF,EAAQnF,IAC3B+B,EAAK9B,KAAKD,GAEX,OAAO+B,wCAGMoD,GACb,IAAIpD,EAAOvE,KAAKyH,YAAYE,GAC5B3H,KAAKiC,SAAS,CAAEsC,KAAKzE,OAAA8H,EAAA,EAAA9H,CAAKyE,6CAGXsD,GACf,IAAMC,EAAQ9H,KAAKkB,MAAMgG,WAAWxE,QAAQmF,GACxCC,EAAQ,EACX9H,KAAKkB,MAAMgG,WAAWzE,KAAKoF,GAE3B7H,KAAKkB,MAAMgG,WAAWa,OAAOD,EAAO,GAErC9H,KAAKiC,SAAS,CAAEiF,WAAWpH,OAAA8H,EAAA,EAAA9H,CAAKE,KAAKkB,MAAMgG,sDAI3C,OAAOlH,KAAKkB,MAAMgG,4CAeV,IAEAc,EAAkBhI,KAAKH,MAAvBmI,cAER,OACC/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAatB,QAASqB,GACpBhI,KAAKmH,YAAYnH,KAAKkB,MAAMqD,cAvDRH,aCenB8D,EACG,QADHA,EAEK,UA+ZIC,6MA3ZbC,MAAQ,CACNC,SAAU,KACVC,UAAW,QAIbC,SAAW,CACTC,QAAS,UACTC,KAAM,UAGRC,WAAa,CACXC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,UAAW,gBAGb3H,MAAQ,CACN4H,SAAU,CAAC,IAAK,KAChBF,iBAAkB,IAClBD,gBAAiB,EACjBE,UAAW,GACXxH,eAAgB,EAChB0H,WAAY,IACZ5H,WAAY,QAEZ6H,wBAAwB,KAiL1BC,cAAgB,WACd,IAAqC,IAAjC7H,EAAK8H,KAAKC,GAAGjI,MAAMI,UAAvB,CAIAqD,QAAQC,IAAI,yBAEZ,IAAIwE,EAAchI,EAAKgI,YAAYC,KAAjBvJ,OAAAwJ,EAAA,EAAAxJ,QAAAwJ,EAAA,EAAAxJ,CAAAsB,KAElBuD,QAAQC,IACN,4BACAxD,EAAK8H,KAAKP,gBAAgBY,WAC1B,WAEFnI,EAAKoI,WAAkD,IAAvCpI,EAAK8H,KAAKP,gBAAgBY,WAAmBH,OAY/DK,gBAAkB,WAKhB,GAHArI,EAAK8H,KAAKC,GAAGO,SAGc,YAAvBtI,EAAK8H,KAAKC,GAAGjI,OAAuBE,EAAKgH,MAAMuB,IACjDhF,QAAQC,IAAI,4BACZgF,cAAcxI,EAAKgH,MAAMuB,KACzBvI,EAAKgH,MAAMuB,SAAMrH,EACjBlB,EAAK8H,KAAKW,QAAQC,gBACb,CAEL,IAAIV,EAAchI,EAAKgI,YAAYC,KAAjBvJ,OAAAwJ,EAAA,EAAAxJ,QAAAwJ,EAAA,EAAAxJ,CAAAsB,KAElBuD,QAAQC,IACN,4BACAxD,EAAK8H,KAAKP,gBAAgBY,WAC1B,WAEFnI,EAAKoI,WAAkD,IAAvCpI,EAAK8H,KAAKP,gBAAgBY,WAAmBH,OAiJjEA,YAAc,WACZ,IAAIS,EAAUzI,EAAK8H,KAAKW,QAKxB,GAHWA,EAAQE,cAGnB,CAKA,IAAIC,EAASH,EAAQI,gBAAgBrI,IAErCR,EAAKa,SAAS,CAAE8G,WAAYiB,IAC5B5I,EAAK8H,KAAKC,GAAGxH,OAAOqI,QAPlB5I,EAAKqI,sGAjXPzJ,KAAKkK,6DAEYC,GACjBnK,KAAKkJ,KAAKC,GAAGiB,cAAcD,GAC3BnK,KAAKiC,SAAS,CAAEd,WAAYgJ,qCAIrB,IAAAlE,EAAAjG,KACP,OACEiE,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAACkG,EAAD,CAAcV,IAAI,OAClB1F,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAQT,QAAS,kBAAMV,EAAKwD,oBAA5B,gBAMAxF,EAAAC,EAAAC,cAACmG,EAAA,EAAD,KACErG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,KACEtG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KAEEvG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,KACErG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKtF,UAAU,OACbhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,EAAGxF,UAAU,wBAAtB,aAGAhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAACuG,EAAD,CACEf,IAAI,WACJgB,IAAK,GACLC,IAAK,IACLlD,aAAc,CACZ1H,KAAKkB,MAAM4H,SAAS,GACpB9I,KAAKkB,MAAM4H,SAAS,IAEtB+B,UAAU,EACV7C,cAAe,kBAAM/B,EAAKiE,uBAIhCjG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKtF,UAAU,OACbhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,EAAGxF,UAAU,uBAAtB,uBAGAhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAAC2G,EAAD,CACEnB,IAAI,kBACJgB,IAAK,EACLC,IAAK,IACLlD,aAAc1H,KAAKkB,MAAMyH,gBACzBX,cAAe,kBACb/B,EAAK8E,8BAKb9G,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKtF,UAAU,OACbhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,EAAGxF,UAAU,uBAAtB,mBAGAhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAAC2G,EAAD,CACEnB,IAAI,mBACJgB,IAAK,EACLC,IAAK,GACLlD,aAAc1H,KAAKkB,MAAM0H,iBAAmB,GAC5CZ,cAAe,kBACb/B,EAAKiE,gBAAgBjE,EAAKyC,WAAWE,uBAK7C3E,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKtF,UAAU,OACbhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,EAAGxF,UAAU,uBAAtB,QAGAhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAAC2G,EAAD,CACEnB,IAAI,YACJgB,IAAK,EACLC,IAAK,GACLlD,aAAc1H,KAAKkB,MAAM2H,UACzBb,cAAe,kBACb/B,EAAKiE,gBAAgBjE,EAAKyC,WAAWG,gBAK7C5E,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKtF,UAAU,OACbhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,EAAGxF,UAAU,uBAAtB,oBAGAhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAAC2G,EAAD,CACEnB,IAAI,iBACJgB,IAAK,EACLC,IAAK,GACLlD,aAAc1H,KAAKkB,MAAMG,eACzB2G,cAAe,kBAAM/B,EAAKiE,uBAIhCjG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKtF,UAAU,OACbhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,EAAGxF,UAAU,uBAAtB,eAGAhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAAC6G,EAAD,CACEhD,cAAe,kBAAM/B,EAAKgF,mBAC1BtB,IAAI,aACJjC,aAAc1H,KAAKkB,MAAMG,mBAI/B4C,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKtF,UAAU,OACbhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,EAAGxF,UAAU,uBAAtB,cAGAhB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CACEC,OAAQnL,KAAKkB,MAAM8H,uBACnBU,OAAQ,kBAAMzD,EAAKmF,uBAEnBnH,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CAAgBC,OAAK,GAElBtL,KAAKkB,MAAMC,YAEd8C,EAAAC,EAAAC,cAACoH,EAAA,EAAD,KACEtH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CACE7E,QAAS,WACPV,EAAKwF,mBAAmBvD,KAF5B,SAQAjE,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CACE7E,QAAS,WACPV,EAAKwF,mBACHvD,KAHN,iBAgBZjE,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAKC,GAAI,GAGPxG,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOW,MAAM,QAAb,eAEEpD,EAAAC,EAAAC,cAAA,QAAMwF,IAAI,mBAEP3J,KAAKkB,MAAM6H,WAAW5D,QAAQ,KAGnClB,EAAAC,EAAAC,cAACuH,EAAD,CAASC,OAAQ3L,KAAKkB,MAAMyK,OAAQjH,SAAU,kBAAMuB,EAAKgD,iBAAiBU,IAAI,6DA2BxF3J,KAAKiC,SAAS,SAAAsD,GAAS,MAAK,CAC1ByD,wBAAyBzD,EAAUyD,+DAqDrC,MARQ,CACND,WAAY/I,KAAKkJ,KAAKC,GAAGhG,SACzB2F,SAAU9I,KAAKkJ,KAAKJ,SAASS,WAC7BZ,gBAAiB3I,KAAKkJ,KAAKP,gBAAgBY,WAC3CX,iBAAkB5I,KAAKkJ,KAAKN,iBAAiBW,WAC7CV,UAAW7I,KAAKkJ,KAAKL,UAAUU,WAC/BlI,eAAgBrB,KAAKkJ,KAAK7H,eAAekI,sDAM3C,IAAIrC,EAAalH,KAAKkJ,KAAK0C,WAAWC,gBACtC7L,KAAKkJ,KAAKC,GAAG2C,WAAW5E,oDAKxBvC,QAAQC,IAAI,0BACZ,IAAMmH,EAAI/L,KAAKgM,aAETC,EAAqBF,EAAEpD,gBACzBuD,EAAeC,KAAKC,MAA4B,GAArBL,EAAEnD,iBAAyBmD,EAAEpD,iBAC5D3I,KAAKkJ,KAAKL,UAAU5G,SAAS,CAAEF,MAAOmK,IAWtC,IARA,IAAIvB,EAAMoB,EAAEjD,SAAS,GAGjBuD,GAFMN,EAAEjD,SAAS,GAEC6B,GAAOuB,EAGzBrC,EAAU7J,KAAKkJ,KAAKW,QACpByC,EAAW,GACN9J,EAAI,EAAGA,GAAK0J,EAAc1J,IACjC8J,EAAS7J,KAAK,CACZG,KAAMJ,EAAIyJ,EACVrK,IAAM+I,EAAMnI,EAAI6J,IAGpBxC,EAAQ0C,QAAQD,GAChBtM,KAAKkJ,KAAKC,GAAGxH,OAAOoK,EAAEjD,SAAS,4CAQjB0D,GAEd,IAAMT,EAAI/L,KAAKgM,aAEXC,EAAqBF,EAAEpD,gBACvB8D,EAA2C,GAArBV,EAAEnD,iBACxBsD,EAAeH,EAAElD,UACjB6D,EAAoBX,EAAE1K,eAGtBmL,IAAOxM,KAAK0I,WAAWC,kBACzBuD,EAAeC,KAAKC,MAA4B,GAArBL,EAAEnD,iBAAyBmD,EAAEpD,iBACxD3I,KAAKkJ,KAAKL,UAAU5G,SAAS,CAAEF,MAAOmK,KAGtCM,IAAOxM,KAAK0I,WAAWG,WACvB2D,IAAOxM,KAAK0I,WAAWE,mBAEvBqD,EAAqBE,KAAKC,MAA4B,GAArBL,EAAEnD,iBAAyBmD,EAAElD,WAC9D7I,KAAKkJ,KAAKP,gBAAgB1G,SAAS,CAAEF,MAAOkK,KAI9CjM,KAAK+K,yBAcL/K,KAAKiC,SAAS,CACZ8G,WAAYgD,EAAEjD,SAAS,GACvBA,SAAUiD,EAAEjD,SACZF,iBAAkB6D,EAClB9D,gBAAiBsD,EACjBpD,UAAWqD,EACX7K,eAAgBqL,IAGlB1M,KAAKkJ,KAAKC,GAAGnH,kBAAkB0K,GAC/B1M,KAAKkJ,KAAKC,GAAGxH,OAAOoK,EAAEjD,SAAS,IAG/B9I,KAAKkJ,KAAK0C,WAAWe,cAAcD,sCAG1B9J,EAAMgK,GACfjI,QAAQC,IAAI,gBAER5E,KAAKoI,MAAMuB,MACXhF,QAAQC,IAAI,mCACZgF,cAAc5J,KAAKoI,MAAMuB,KACzB3J,KAAKoI,MAAMuB,SAAMrH,EACjBtC,KAAKoI,MAAME,UAAY,KACvBtI,KAAKkJ,KAAKW,QAAQC,aAGtB9J,KAAKoI,MAAQ,CACXuB,IAAKkD,YAAYD,EAAUhK,GAC3B0F,UAAW,IAAI1C,aA/XHxB,aCXE0I,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnJ,EAAAC,EAAAC,cAACkJ,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.791eb96a.chunk.js","sourcesContent":["import {Sampler} from 'tone'\r\n\r\n\r\nclass SoundMachineInstrument extends Sampler {\r\n\r\n    constructor(props) {\r\n        var o = {\r\n            \"C3\" : props.accent,\r\n            \"C4\" : props.tick         \r\n        };\r\n        super(o,{\r\n            baseUrl: './audio/'\r\n        });\r\n    }\r\n}\r\n\r\nexport default SoundMachineInstrument;\r\n\r\n ","import React, { Component } from 'react';\r\nimport Tone from 'tone';\r\nimport SoundMachineInstrument from './SoundMachineInstrument'\r\n\r\nclass SoundMachine extends Component {\r\n    instrumentTypes = {\r\n        TABLA: 'tabla',\r\n        ELECTRO: 'electro',\r\n        SYNTH: 'synth'\r\n    }\r\n\r\n    tickNote = 'C4';\r\n    accentNote = 'C3';\r\n    \r\n    state = { \r\n         //isInitialized: false,\r\n        instrument: this.instrumentTypes.TABLA,\r\n        measuresPerBar: 3,\r\n        isPlaying: false\r\n     }\r\n    \r\n    samples = {}\r\n\r\n    instruments = {}\r\n\r\n    accents = [0];\r\n\r\n    part = null;\r\n \r\n    componentDidMount() {\r\n        // reload/debug bell\r\n        var synth = new Tone.Synth().toMaster();\r\n        synth.triggerAttackRelease('A2');\r\n\r\n    \r\n        Tone.Buffer.on(\"load\", this.restart)\r\n\r\n\r\n        var tabla = new SoundMachineInstrument({\r\n            key: 'tabla',\r\n            accent: \"Tha.wav\",\r\n            tick: \"Tin.wav\"\r\n        }).toMaster();\r\n         \r\n        this.instruments[this.instrumentTypes.TABLA] = tabla\r\n        \r\n        var electro = new SoundMachineInstrument({\r\n            key: 'electro',\r\n            accent: \"electronicHat.wav\",\r\n            tick: \"electronicKick.mp3\"\r\n        }).toMaster();\r\n         \r\n        this.instruments[this.instrumentTypes.ELECTRO] = electro\r\n        // lowest latency  TODO: not sure what this does\r\n         Tone.context.latencyHint = 'playback'\r\n        //this.setState({isInitialized: true});  \r\n    }\r\n\r\n\r\n    setInstrument(instrumentKey) { \r\n        // TODO validate key\r\n        this.setState({instrument: instrumentKey}, this.restart);\r\n        \r\n    }\r\n    setBpm = (bpm) => {\r\n        Tone.Transport.bpm.value = bpm;\r\n    }\r\n\r\n    setMeasuresPerBar = (measuresPerBar) => {\r\n        this.setState({'measuresPerBar': measuresPerBar}, () => {this.restart()})\r\n    }\r\n\r\n    restart = () => {\r\n        var sampler = this.instruments[this.state.instrument];\r\n        \r\n        if (this.part) {\r\n            this.part.stop();\r\n            this.part.removeAll();\r\n            this.part = undefined; // maybe it will help with garbage collection?\r\n        };\r\n\r\n        let score = [];\r\n        for (let i = 0 ; i < this.state.measuresPerBar ; i++) {\r\n            score.push([\"0:\"+i, this.accents.indexOf(i) < 0 ? this.tickNote : this.accentNote]);\r\n        }\r\n        \r\n        this.part = new Tone.Part(function(time, note){\r\n            // trigger note\r\n            sampler.triggerAttackRelease(note, \"4n\", time)\r\n        }, score);\r\n        \r\n        // set signature\r\n        Tone.Transport.timeSignature = [this.state.measuresPerBar, 4];\r\n        \r\n        this.part.loopEnd = \"1m\";// + this.state.measuresPerBar;\r\n        this.part.loop = true;\r\n        this.part.start()\r\n        \r\n    }\r\n\r\n    setAccents(accentIdxArray) {\r\n        this.accents = accentIdxArray;\r\n        for (let i = 0 ; i < this.part.length; i++) {\r\n            this.part.at(\"0:\"+i, this.accents.indexOf(i) < 0 ? this.tickNote: this.accentNote);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (<div>Sound is {this.state.isPlaying === true ? 'playing' : 'stopped'}</div>);\r\n    }\r\n\r\n \r\n    toggle() {     \r\n        if (Tone.Transport.state === \"started\") {\r\n            this.setState({isPlaying: false});\r\n            Tone.Transport.stop();\r\n        }\r\n        else {  \r\n            this.setState({isPlaying: true});\r\n            Tone.Transport.start(\"+0.05\");\r\n        }\r\n    }\r\n    \r\n    getBpm = () => {\r\n        return(Tone.Transport.bpm.value);\r\n    }\r\n}\r\n \r\nexport default SoundMachine;\r\n","import React, { Component } from \"react\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nclass Planner extends Component {\r\n  state = {\r\n    currentStep: 0,\r\n    bars: []\r\n  };\r\n  stepsCounter = 0;\r\n\r\n\r\n  setPlan(plan) {\r\n    var bars = [];\r\n    \r\n    for (var i = 0; i < plan.length; i++) {\r\n      const time = plan[i].time;\r\n      const bpm = plan[i].bpm;\r\n\r\n      var bar = {\r\n        time: time,\r\n        formattedTime: this.formatTime(time),\r\n        bpm: bpm,\r\n        step: this.stepsCounter++\r\n      };\r\n\r\n      bars.push(bar);\r\n    }\r\n\r\n    // update to new state\r\n    this.stepsCounter = 0;\r\n  \r\n    this.setState(prevState => ({\r\n      currentStep: 0,\r\n      bars: bars\r\n    }));\r\n    this.planChanged();\r\n  }\r\n\r\n  clear() {\r\n    this.stepsCounter = 0;\r\n    this.setState({ bars: [], currentStep: 0 });\r\n    this.planChanged();\r\n  }\r\n\r\n  planChanged = () => {\r\n    if (this.props.onChange) {\r\n      console.log('<Planner>onChange')\r\n      this.props.onChange();\r\n    }\r\n  };\r\n\r\n  resetStep() {\r\n    this.setState({ currentStep: 0 });\r\n  }\r\n  advanceStep() {\r\n    var currentStep = this.state.currentStep;\r\n\r\n    // check if we're not at the end of plan\r\n    if (currentStep + 1 >= this.state.bars.length) {\r\n      return null;\r\n    }\r\n\r\n    // console.log('advancing step to' , currentStep + 1)\r\n    this.setState({ currentStep: currentStep + 1 });\r\n    // console.log('returning' , this.state.currentStep)\r\n    return this.state.currentStep;\r\n  }\r\n  getCurrentBar() {\r\n    if (this.state.getCurrentStep >= this.state.bars.length) {\r\n      throw new Error(\"we are fcked\");\r\n    }\r\n    return this.state.bars[this.state.currentStep];\r\n  }\r\n\r\n  padTime(t) {\r\n    return t < 10 ? \"0\" + t : t;\r\n  }\r\n  formatTime(timeInSeconds) {\r\n    //{this.leadingZeroCheck(now.getMinutes())}:{now.getSeconds()} --\r\n    var t = new Date(0, 0, 0, 0, 0, 0, 0);\r\n    t.setSeconds(timeInSeconds);\r\n    var s = this.padTime(t.getMinutes()) + \":\" + this.padTime(t.getSeconds());\r\n    return s;\r\n  }\r\n\r\n  barRender = b => {\r\n    let cls =\r\n      \"badge badge-pill badge-\" +\r\n      (this.state.currentStep === b.step ? \"primary\" : \"secondary\");\r\n    return (\r\n      <code className={cls} key={\"key_\" + b.bpm}>\r\n        {b.formattedTime} -- {b.bpm.toFixed(2)}\r\n      </code>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    console.log(\"<Planner> render\");\r\n    // don't doo much if no plan yet\r\n    if (this.state.bars.length === 0) {\r\n      return <Alert variant=\"warning\">No plan</Alert>;\r\n    }\r\n\r\n    //console.log('rendering plan with ', this.state.bars.length, 'length')\r\n    return (\r\n      <Alert variant=\"success\">\r\n        <div style={{ fontSize: \"0.5rem\" }}>\r\n          {this.state.bars.map(bar => this.barRender(bar))}\r\n        </div>\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Planner;\r\n","import React from 'react'\r\nimport Slider from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n// import {Container, Row, Col} from 'reactstrap'\r\n\r\nclass AdvancedSlider extends Slider {\r\n \r\n    // constructor(props) {\r\n    //     super(props)\r\n    //     // if (props.renderVal) {\r\n    //     //     this.renderVal = props.renderVal\r\n    //     // }\r\n    \r\n    // }\r\n    render() { \r\n        return (\r\n            <div>\r\n                {super.render()}\r\n                <div><Badge  onClick={this.onBadgeClick} className=\"d-i\">{this.state.value}</Badge></div>\r\n            </div>\r\n            );\r\n    }\r\n\r\n    onBadgeClick() {\r\n        // attach editorInPlace\r\n    }\r\n \r\n}\r\n\r\nexport default AdvancedSlider\r\n","import React from 'react'\r\nimport { Range } from 'rc-slider'\r\nimport {Badge} from 'reactstrap'\r\n\r\nclass AdvancedRange extends Range {\r\n    render() { \r\n        return (<div>\r\n            {super.render()}\r\n            <Badge onClick={this.onBadgeClick} className=\"d-i\">{this.state.bounds[0]} - {this.state.bounds[1]}</Badge>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default AdvancedRange;\r\n","import React, { Component } from \"react\";\r\nimport { Button, ButtonGroup } from \"reactstrap\";\r\n\r\nclass BarManager extends Component {\r\n\tstate = {\r\n\t\tbars: [],\r\n\t\taccentBars: [0]\r\n\t};\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state.bars = this.prepareBars(props.defaultValue);\r\n\t}\r\n\r\n\tprepareBars(amount) {\r\n\t\tvar bars = [];\r\n\t\tfor (var i = 0; i < amount; i++) {\r\n\t\t\tbars.push(i);\r\n\t\t}\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tsetBarsAmount(amount) {\r\n\t\tvar bars = this.prepareBars(amount);\r\n\t\tthis.setState({ bars: [...bars] });\r\n\t}\r\n\r\n\thandleCellClick(selected) {\r\n\t\tconst index = this.state.accentBars.indexOf(selected);\r\n\t\tif (index < 0) {\r\n\t\t\tthis.state.accentBars.push(selected);\r\n\t\t} else {\r\n\t\t\tthis.state.accentBars.splice(index, 1);\r\n\t\t}\r\n\t\tthis.setState({ accentBars: [...this.state.accentBars] });\r\n\t}\r\n\r\n\tgetAccentBars() {\r\n\t\treturn this.state.accentBars;\r\n\t}\r\n\trenderCells = bars => {\r\n\t\treturn bars.map(bar => (\r\n\t\t\t<Button\r\n\t\t\t\tcolor=\"primary\"\r\n\t\t\t\tkey={bar}\r\n\t\t\t\tonClick={() => this.handleCellClick(bar)}\r\n\t\t\t\tactive={!this.state.accentBars.includes(bar)}\r\n\t\t\t>\r\n\t\t\t\t{bar + 1}\r\n\t\t\t</Button>\r\n\t\t));\r\n\t};\r\n\r\n\trender() {\r\n\t\t// dunno how this works but it does the job bubbling up the click event\r\n\t\tconst { onAfterChange } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<ButtonGroup onClick={onAfterChange}>\r\n\t\t\t\t{this.renderCells(this.state.bars)}\r\n\t\t\t</ButtonGroup>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BarManager;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./components/SoundMachine\";\nimport SoundMachine from \"./components/SoundMachine\";\nimport Planner from \"./components/Planner\";\nimport \"rc-slider/assets/index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Container, Row, Col, Button, Badge } from \"reactstrap\";\nimport {\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\nimport AdvancedSlider from \"./components/AdvancedSlider\";\nimport AdvancedRange from \"./components/AdvancedRange\";\nimport BarManager from \"./components/BarManager\";\n\nconst availableInstruments = {\n  tabla: \"tabla\",\n  electro: \"electro\"\n};\n\nclass App extends Component {\n  timer = {\n    timerRef: null,\n    startTime: null\n  };\n\n  // based on this value we will wait till segment or steps are finished to advance speed\n  lockType = {\n    SEGMENT: \"segment\",\n    STEP: \"step\"\n  };\n\n  uiElements = {\n    segmentDuration: \"segment_duration\",\n    exerciseDuration: \"exercise_duration\",\n    totalBars: \"total_bars\"\n  };\n\n  state = {\n    bpmRange: [200, 300],\n    exerciseDuration: 2 * 60, // 10 minutes\n    segmentDuration: 5, // 5 seconds\n    totalBars: 24, // exerciseDuration / segmentDuration\n    measuresPerBar: 4,\n    currentBpm: 100,\n    instrument: \"tabla\",\n    //lockTo: this.lockType.SEGMENT,    // TODO\n    instrumentDropdownOpen: false\n  };\n\n  componentDidMount() {\n    // initialize with UI settings\n    this.settingsChanged();\n  }\n  onInstrumentSelect(newInstrument) {\n    this.refs.sm.setInstrument(newInstrument);\n    this.setState({ instrument: newInstrument });\n  }\n  // timers = [] // TODO actually I think there is only single timer waiting for next step\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SoundMachine ref=\"sm\" />\n        <Button onClick={() => this.handleStartStop()}>\n          \n          Start / Stop\n        </Button>\n        {/* <button onClick = {() => this.handleSpeedChange(20) } > Speed Up </button>  \n                                <button onClick = {() => this.handleSpeedChange(-20) } > SPeed Down </button>  */}\n        <Container>\n          <Row>\n            <Col>\n              {/* here goes sliders */}\n              <Container>\n                <Row className=\"p-2\">\n                  <Col xs={5} className=\"badge badge-primary \">\n                    BPM Range\n                  </Col>\n                  <Col>\n                    <AdvancedRange\n                      ref=\"bpmRange\"\n                      min={30}\n                      max={400}\n                      defaultValue={[\n                        this.state.bpmRange[0],\n                        this.state.bpmRange[1]\n                      ]}\n                      pushable={true}\n                      onAfterChange={() => this.settingsChanged()}\n                    />\n                  </Col>\n                </Row>\n                <Row className=\"p-2\">\n                  <Col xs={5} className=\"badge badge-primary\">\n                    Segment Duration(s)\n                  </Col>\n                  <Col>\n                    <AdvancedSlider\n                      ref=\"segmentDuration\"\n                      min={1}\n                      max={120}\n                      defaultValue={this.state.segmentDuration}\n                      onAfterChange={() =>\n                        this.segmentDurationChanged()\n                      }\n                    />\n                  </Col>\n                </Row>\n                <Row className=\"p-2\">\n                  <Col xs={5} className=\"badge badge-primary\">\n                    Total time(min)\n                  </Col>\n                  <Col>\n                    <AdvancedSlider\n                      ref=\"exerciseDuration\"\n                      min={1}\n                      max={30}\n                      defaultValue={this.state.exerciseDuration / 60}\n                      onAfterChange={() =>\n                        this.settingsChanged(this.uiElements.exerciseDuration)\n                      }\n                    />\n                  </Col>\n                </Row>\n                <Row className=\"p-2\">\n                  <Col xs={5} className=\"badge badge-primary\">\n                    Bars\n                  </Col>\n                  <Col>\n                    <AdvancedSlider\n                      ref=\"totalBars\"\n                      min={1}\n                      max={50}\n                      defaultValue={this.state.totalBars}\n                      onAfterChange={() =>\n                        this.settingsChanged(this.uiElements.totalBars)\n                      }\n                    />\n                  </Col>\n                </Row>\n                <Row className=\"p-2\">\n                  <Col xs={5} className=\"badge badge-primary\">\n                    Measures per Bar\n                  </Col>\n                  <Col>\n                    <AdvancedSlider\n                      ref=\"measuresPerBar\"\n                      min={2}\n                      max={16}\n                      defaultValue={this.state.measuresPerBar}\n                      onAfterChange={() => this.settingsChanged()}\n                    />\n                  </Col>\n                </Row>\n                <Row className=\"p-2\">\n                  <Col xs={5} className=\"badge badge-primary\">\n                    Bar Manager\n                  </Col>\n                  <Col>\n                    <BarManager\n                      onAfterChange={() => this.onAccentsChange()}\n                      ref=\"barManager\"\n                      defaultValue={this.state.measuresPerBar}\n                    />\n                  </Col>\n                </Row>\n                <Row className=\"p-2\">\n                  <Col xs={5} className=\"badge badge-primary\">\n                    Instrument\n                  </Col>\n                  <Col>\n                    <ButtonDropdown\n                      isOpen={this.state.instrumentDropdownOpen}\n                      toggle={() => this.onInstrumentChange()}\n                    >\n                      <DropdownToggle caret>\n                        \n                        {this.state.instrument}\n                      </DropdownToggle>\n                      <DropdownMenu>\n                        <DropdownItem\n                          onClick={() => {\n                            this.onInstrumentSelect(availableInstruments.tabla);\n                          }}\n                        >\n                          \n                          Tabla\n                        </DropdownItem>\n                        <DropdownItem\n                          onClick={() => {\n                            this.onInstrumentSelect(\n                              availableInstruments.electro\n                            );\n                          }}\n                        >\n                          \n                          Electro\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </ButtonDropdown>\n                  </Col>\n                </Row>\n              </Container>\n            </Col>\n            <Col xs={3}>\n              \n              {/* here goes the plan view */}\n              <Badge color=\"info\">\n                Current BPM:\n                <span ref=\"currentBpmBadge\">\n                  \n                  {this.state.currentBpm.toFixed(0)}\n                </span>\n              </Badge>\n              <Planner lockTo={this.state.lockTo} onChange={() => this.onPlanChanged()} ref=\"planner\" />\n            </Col>\n          </Row>\n        </Container>\n        {/* <div ref='settingsContainer'  style={{'fontFamily': 'courier'}} > */}\n      </div>\n    );\n  }\n\n  onPlanChanged = () => {\n    if (this.refs.sm.state.isPlaying === false) {\n      return;\n    }\n    // plan changed so set new timers\n    console.log('planner onPlanChanged')\n    // bind context to setNewSpeed func\n    var setNewSpeed = this.setNewSpeed.bind(this);\n    // execute newSpeed at specific time\n    console.log(\n      \"scheduling newSpeed each \",\n      this.refs.segmentDuration.getValue(),\n      \"seconds\"\n    );\n    this.startTimer(this.refs.segmentDuration.getValue() * 1000, setNewSpeed);\n  }\n\n  onInstrumentChange() {\n    this.setState(prevState => ({\n      instrumentDropdownOpen: !prevState.instrumentDropdownOpen\n    }));\n\n    //debugger\n  }\n\n  \n  handleStartStop = () => {\n\n    this.refs.sm.toggle();\n\n    // if we stopped, make sure we clear timer as well\n    if (this.refs.sm.state !== \"started\" && this.timer.ref) {\n      console.log(\"plan execution cancelled\");\n      clearInterval(this.timer.ref);\n      this.timer.ref = undefined;\n      this.refs.planner.resetStep();\n    } else {\n      // bind context to setNewSpeed func\n      var setNewSpeed = this.setNewSpeed.bind(this);\n      // execute newSpeed at specific time\n      console.log(\n        \"scheduling newSpeed each \",\n        this.refs.segmentDuration.getValue(),\n        \"seconds\"\n      );\n      this.startTimer(this.refs.segmentDuration.getValue() * 1000, setNewSpeed);\n    }\n    // console.log('how many timers', this.timers)\n\n    // this.timers.push(\n    //     setInterval(newSpeed, this.state.segmentDuration * 1000 )\n    // );\n\n    // var isPlaying  = this.refs.sm.isPlaying();\n    // // pause planner if we're not playing\n    // // TODO this require proper event handling and coop with SoundMachine\n    // if (isPlaying != \"started\") {\n    //     this.refs.planner.pause()\n    // }\n\n    //this.refs.planner.\n  };\n\n  getUiState() {\n    var s = {\n      currentBpm: this.refs.sm.getBpm(),\n      bpmRange: this.refs.bpmRange.getValue(),\n      segmentDuration: this.refs.segmentDuration.getValue(),\n      exerciseDuration: this.refs.exerciseDuration.getValue(),\n      totalBars: this.refs.totalBars.getValue(),\n      measuresPerBar: this.refs.measuresPerBar.getValue()\n    };\n    return s;\n  }\n\n  onAccentsChange() {\n    var accentBars = this.refs.barManager.getAccentBars();\n    this.refs.sm.setAccents(accentBars);\n    //this.refs.sm.restart();\n  }\n\n  segmentDurationChanged() {\n    console.log('segmentDurationChanged')\n    const s = this.getUiState();\n\n    const newSegmentDuration = s.segmentDuration;\n    let newTotalBars = Math.floor((s.exerciseDuration * 60) / s.segmentDuration);\n    this.refs.totalBars.setState({ value: newTotalBars });\n\n    // construct new plan of excercise\n    var min = s.bpmRange[0];\n    var max = s.bpmRange[1];\n\n    var deltaBpm = (max - min) / newTotalBars;\n    //console.log('deltaBpm',deltaBpm)\n    // define new plan\n    var planner = this.refs.planner;\n    var segments = [];\n    for (var i = 0; i <= newTotalBars; i++) {\n      segments.push({\n        time: i * newSegmentDuration,\n        bpm:  min + i * deltaBpm\n      })\n    }\n    planner.setPlan(segments);\n    this.refs.sm.setBpm(s.bpmRange[0]);\n    \n    // if (this.state.isPlaying) {\n    //   console.log('it is playing so plan is not executed yet')\n    // }\n    \n  }\n\n  settingsChanged(el) {\n    //console.log('settings Changed',el);\n    const s = this.getUiState();\n\n    let newSegmentDuration = s.segmentDuration;\n    let newExerciseDuration = s.exerciseDuration * 60;\n    let newTotalBars = s.totalBars;\n    let newMeasuresPerBar = s.measuresPerBar;\n\n    // if segment duration changed then determine how many bars\n    if (el === this.uiElements.segmentDuration) {\n      newTotalBars = Math.floor((s.exerciseDuration * 60) / s.segmentDuration);\n      this.refs.totalBars.setState({ value: newTotalBars });\n    }\n    if (\n      el === this.uiElements.totalBars ||\n      el === this.uiElements.exerciseDuration\n    ) {\n      newSegmentDuration = Math.floor((s.exerciseDuration * 60) / s.totalBars);\n      this.refs.segmentDuration.setState({ value: newSegmentDuration });\n      // console.log('newSegmentDuration',newSegmentDuration)\n    }\n\n    this.segmentDurationChanged()\n\n    // clear all timers\n    // if (this.timer.ref) {\n    //   clearInterval(this.timer.ref);\n    //   this.timer.ref = null;\n    // }\n\n    // bind context to setNewSpeed func\n    // var setNewSpeed = this.setNewSpeed.bind(this);\n    // execute newSpeed at specific time\n    // console.log('scheduling newSpeed each', newSegmentDuration * 1000)\n    // this.startTimer(newSegmentDuration * 1000, setNewSpeed);\n\n    this.setState({\n      currentBpm: s.bpmRange[0],\n      bpmRange: s.bpmRange,\n      exerciseDuration: newExerciseDuration,\n      segmentDuration: newSegmentDuration,\n      totalBars: newTotalBars,\n      measuresPerBar: newMeasuresPerBar\n    });\n\n    this.refs.sm.setMeasuresPerBar(newMeasuresPerBar);\n    this.refs.sm.setBpm(s.bpmRange[0]);\n\n    // update barManager with newMeasureSetting\n    this.refs.barManager.setBarsAmount(newMeasuresPerBar);\n  }\n\n  startTimer(time, callback) {\n    console.log('startTimer()')\n    // make sure we dispose any timer that's currently set\n    if (this.timer.ref) {\n        console.log(\"startTimer() old timer disposed\");\n        clearInterval(this.timer.ref);\n        this.timer.ref = undefined\n        this.timer.startTime = null\n        this.refs.planner.resetStep();\n    }\n\n    this.timer = {\n      ref: setInterval(callback, time),\n      startTime: new Date()\n    };\n  }\n\n  // clearTimer() {\n  //     // clear all timers\n  //     if (this.timer && this.timer.ref){\n  //         clearInterval(this.timer.ref);\n  //     }\n  // }\n\n  setNewSpeed = () => {\n    var planner = this.refs.planner;\n    // preincrement as usually the first step is already set\n    var step = planner.advanceStep();\n\n    // if no step that meanst it's over, so remove interval (timer)\n    if (!step) {\n      this.handleStartStop();\n      return;\n    }\n\n    var newBpm = planner.getCurrentBar().bpm;\n    // set new bpm\n    this.setState({ currentBpm: newBpm });\n    this.refs.sm.setBpm(newBpm);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}